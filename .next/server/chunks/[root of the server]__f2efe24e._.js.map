{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAChB","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/utils/authUtils.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { jwtVerify } from 'jose';\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\r\n\r\nexport function generateToken(adminId: string) {\r\n    return jwt.sign({ adminId }, SECRET_KEY, { expiresIn: '1h' });\r\n}\r\n\r\n// export function verifyToken(token: string) {\r\n//     try {\r\n//         return jwt.verify(token, SECRET_KEY);\r\n//     } catch (error) {\r\n//         console.error('Token verification failed:', error);\r\n//         return null;\r\n//     }\r\n// }\r\n\r\nexport async function verifyToken(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, new TextEncoder().encode(SECRET_KEY));\r\n        return payload;\r\n    } catch (error) {\r\n        console.error('Token verification failed:', error);\r\n        return null;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,SAAS,cAAc,OAAe;IACzC,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;IAAQ,GAAG,YAAY;QAAE,WAAW;IAAK;AAC/D;AAWO,eAAe,YAAY,KAAa;IAC3C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,IAAI,cAAc,MAAM,CAAC;QACpE,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACX;AACJ","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/utils/hashUtils.ts"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\n\r\nexport async function hashPassword(password: string) {\r\n    const salt = await bcrypt.genSalt(10);\r\n    return bcrypt.hash(password, salt);\r\n}\r\n\r\nexport async function comparePassword(password: string, hashedPassword: string) {\r\n    return bcrypt.compare(password, hashedPassword);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IAC/C,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;IAClC,OAAO,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACjC;AAEO,eAAe,gBAAgB,QAAgB,EAAE,cAAsB;IAC1E,OAAO,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AACpC","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/app/api/controllers/admin/authController.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport prisma from \"@/lib/prisma\";\r\nimport { generateToken } from '@/utils/authUtils';\r\nimport { comparePassword } from '@/utils/hashUtils';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n// Dummy User Database (Replace with actual DB)\r\nconst users = [\r\n    { id: '1', email: 'admin@example.com', password: '$2b$10$PZmGqk9pWg/yH6Z1zuhef.6OOkHLKVNKIFLJCO/AcarRtt0OC4o8O' }, // bcrypt-hashed password\r\n];\r\n\r\nexport async function handleLogin(req: NextRequest) {\r\n    try {\r\n        const { email, password } = await req.json();\r\n\r\n        // Fetch the admin by email from the database\r\n        const admin = await prisma.admin.findUnique({\r\n            where: { email },\r\n            select: {\r\n                id: true,\r\n                name: true,\r\n                email: true,\r\n                password: true, // Hashed password stored in DB\r\n                role: true,\r\n            },\r\n        });\r\n\r\n        if (!admin) {\r\n            return NextResponse.json({ error: \"Invalid email or password\" }, { status: 401 });\r\n        }\r\n\r\n        // Hash the password using bcrypt\r\n        const salt = await bcrypt.genSalt(10); // Generates a salt with 10 rounds\r\n        const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n        console.log(`Hashed Password: ${hashedPassword}`); // Log the hashed password\r\n\r\n        const isPasswordValid = await comparePassword(password, admin.password);\r\n        if (!isPasswordValid) {\r\n            return NextResponse.json({ error: 'Invalid email or password' }, { status: 401 });\r\n        }\r\n\r\n        const token = generateToken(admin.id);\r\n        return NextResponse.json({\r\n            message: \"Login successful\",\r\n            token,\r\n            user: {\r\n                id: admin.id,\r\n                name: admin.name,\r\n                email: admin.email,\r\n                role: admin.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,+CAA+C;AAC/C,MAAM,QAAQ;IACV;QAAE,IAAI;QAAK,OAAO;QAAqB,UAAU;IAA+D;CACnH;AAEM,eAAe,YAAY,GAAgB;IAC9C,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,6CAA6C;QAC7C,MAAM,QAAQ,MAAM,sHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;YACf,QAAQ;gBACJ,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,MAAM;YACV;QACJ;QAEA,IAAI,CAAC,OAAO;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,iCAAiC;QACjC,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,KAAK,kCAAkC;QACzE,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,GAAG,0BAA0B;QAE7E,MAAM,kBAAkB,MAAM,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE,UAAU,MAAM,QAAQ;QACtE,IAAI,CAAC,iBAAiB;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,QAAQ,CAAA,GAAA,2HAAA,CAAA,gBAAa,AAAD,EAAE,MAAM,EAAE;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT;YACA,MAAM;gBACF,IAAI,MAAM,EAAE;gBACZ,MAAM,MAAM,IAAI;gBAChB,OAAO,MAAM,KAAK;gBAClB,MAAM,MAAM,IAAI;YACpB;QACJ;IACJ,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/app/api/admin/auth/login/route.ts"],"sourcesContent":["import { handleLogin } from '../../../controllers/admin/authController';\r\nimport { NextRequest } from 'next/server';\r\n\r\nexport async function POST(req: NextRequest) {\r\n    return handleLogin(req);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAGO,eAAe,KAAK,GAAgB;IACvC,OAAO,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD,EAAE;AACvB","debugId":null}}]
}