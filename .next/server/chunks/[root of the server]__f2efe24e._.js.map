{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        // Attempt to connect to the database\r\n        await prisma.$connect();\r\n        console.log(\"Database connection established successfully.\");\r\n    } catch (error) {\r\n        // If connection fails, log the error\r\n        console.error(\"Database connection failed:\", error);\r\n        // Avoid using process.exit in Edge Runtime\r\n        // Instead, you can throw an error to be handled by the calling code\r\n        throw new Error(\"Database connection failed\");\r\n    }\r\n}\r\n\r\nconnectToDatabase().catch((error) => {\r\n    // Handle any unhandled promise rejections here, if necessary\r\n    console.error(error);\r\n    // You can choose to return a response or perform other actions instead of exiting\r\n});\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,eAAe;IACX,IAAI;QACA,qCAAqC;QACrC,MAAM,OAAO,QAAQ;QACrB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,qCAAqC;QACrC,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,2CAA2C;QAC3C,oEAAoE;QACpE,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,oBAAoB,KAAK,CAAC,CAAC;IACvB,6DAA6D;IAC7D,QAAQ,KAAK,CAAC;AACd,kFAAkF;AACtF;uCAEe","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/utils/authUtils.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { jwtVerify } from 'jose';\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\r\n\r\nexport function generateToken(userId: number, userRole: string) {\r\n    return jwt.sign({ userId, userRole }, SECRET_KEY, { expiresIn: '1h' });\r\n}\r\n\r\nexport async function verifyToken(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, new TextEncoder().encode(SECRET_KEY));\r\n        console.log(`payload - `, payload);\r\n        return payload;\r\n    } catch (error) {\r\n        console.error('Token verification failed:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Check if user exists in the database\r\nexport async function isUserExist(userId: number) {\r\n    try {\r\n        // Fetch user details from database\r\n        const user = await prisma.user.findUnique({\r\n            where: { id: userId },\r\n            select: {\r\n                id: true,\r\n                name: true,\r\n                email: true,\r\n                password: true, // Hashed password stored in DB\r\n                role: true,\r\n            },\r\n        });\r\n\r\n        // If user doesn't exist, return false with a message\r\n        if (!user) {\r\n            return { status: false, message: \"User with the provided ID does not exist\" };\r\n        }\r\n\r\n        // Return user details if found\r\n        return { status: true, user };\r\n    } catch (error) {\r\n        console.error(\"Error fetching user by ID:\", error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,SAAS,cAAc,MAAc,EAAE,QAAgB;IAC1D,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;QAAQ;IAAS,GAAG,YAAY;QAAE,WAAW;IAAK;AACxE;AAEO,eAAe,YAAY,KAAa;IAC3C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,IAAI,cAAc,MAAM,CAAC;QACpE,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE;QAC1B,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACX;AACJ;AAGO,eAAe,YAAY,MAAc;IAC5C,IAAI;QACA,mCAAmC;QACnC,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,OAAO;gBAAE,IAAI;YAAO;YACpB,QAAQ;gBACJ,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,MAAM;YACV;QACJ;QAEA,qDAAqD;QACrD,IAAI,CAAC,MAAM;YACP,OAAO;gBAAE,QAAQ;gBAAO,SAAS;YAA2C;QAChF;QAEA,+BAA+B;QAC/B,OAAO;YAAE,QAAQ;YAAM;QAAK;IAChC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAwB;IAC7D;AACJ","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/utils/hashUtils.ts"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\n\r\nexport async function hashPassword(password: string) {\r\n    const salt = await bcrypt.genSalt(10);\r\n    return bcrypt.hash(password, salt);\r\n}\r\n\r\nexport async function comparePassword(password: string, hashedPassword: string) {\r\n    return bcrypt.compare(password, hashedPassword);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IAC/C,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;IAClC,OAAO,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACjC;AAEO,eAAe,gBAAgB,QAAgB,EAAE,cAAsB;IAC1E,OAAO,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AACpC","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/app/api/controllers/admin/authController.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport prisma from \"@/lib/prisma\";\r\nimport { generateToken } from '@/utils/authUtils';\r\nimport { comparePassword } from '@/utils/hashUtils';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport async function handleLogin(req: NextRequest) {\r\n    try {\r\n        const { email, password } = await req.json();\r\n\r\n        // Hash the password using bcrypt\r\n        const salt = await bcrypt.genSalt(10); // Generates a salt with 10 rounds\r\n        const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n        console.log(`Hashed Password: ${hashedPassword}`); // Log the hashed password\r\n\r\n        // Fetch the user by email from the database\r\n        let user = await prisma.user.findUnique({\r\n            where: { email },\r\n            select: {\r\n                id: true,\r\n                name: true,\r\n                email: true,\r\n                password: true, // Hashed password stored in DB\r\n                role: true,\r\n            },\r\n        });\r\n\r\n        if (!user) {\r\n            user = await prisma.userStaff.findUnique({\r\n                where: { email },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true,\r\n                    role: true,\r\n                },\r\n            });\r\n\r\n            if (!user) {\r\n                return NextResponse.json({ error: \"Invalid email or password\" }, { status: 401 });\r\n            }\r\n        }\r\n\r\n        const isPasswordValid = await comparePassword(password, user.password);\r\n        if (!isPasswordValid) {\r\n            return NextResponse.json({ error: 'Invalid email or password' }, { status: 401 });\r\n        }\r\n\r\n        const token = generateToken(user.id, user.role);\r\n        return NextResponse.json({\r\n            message: \"Login successful\",\r\n            token,\r\n            user: {\r\n                id: user.id,\r\n                name: user.name,\r\n                email: user.email,\r\n                role: user.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        console.error(`error - `, error);\r\n        return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,YAAY,GAAgB;IAC9C,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,iCAAiC;QACjC,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,KAAK,kCAAkC;QACzE,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,GAAG,0BAA0B;QAE7E,4CAA4C;QAC5C,IAAI,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACpC,OAAO;gBAAE;YAAM;YACf,QAAQ;gBACJ,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,MAAM;YACV;QACJ;QAEA,IAAI,CAAC,MAAM;YACP,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,SAAS,CAAC,UAAU,CAAC;gBACrC,OAAO;oBAAE;gBAAM;gBACf,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;YAEA,IAAI,CAAC,MAAM;gBACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAA4B,GAAG;oBAAE,QAAQ;gBAAI;YACnF;QACJ;QAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE,UAAU,KAAK,QAAQ;QACrE,IAAI,CAAC,iBAAiB;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,QAAQ,CAAA,GAAA,2HAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,EAAE,EAAE,KAAK,IAAI;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT;YACA,MAAM;gBACF,IAAI,KAAK,EAAE;gBACX,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACnB;QACJ;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/app/api/admin/auth/login/route.ts"],"sourcesContent":["import { handleLogin } from '../../../controllers/admin/authController';\r\nimport { NextRequest } from 'next/server';\r\n\r\nexport async function POST(req: NextRequest) {\r\n    return handleLogin(req);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAGO,eAAe,KAAK,GAAgB;IACvC,OAAO,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD,EAAE;AACvB","debugId":null}}]
}