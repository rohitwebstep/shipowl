{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/10/WORKING/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        // Attempt to connect to the database\r\n        await prisma.$connect();\r\n        console.log(\"Database connection established successfully.\");\r\n    } catch (error) {\r\n        // If connection fails, log the error\r\n        console.error(\"Database connection failed:\", error);\r\n        // Avoid using process.exit in Edge Runtime\r\n        // Instead, you can throw an error to be handled by the calling code\r\n        throw new Error(\"Database connection failed\");\r\n    }\r\n}\r\n\r\nconnectToDatabase().catch((error) => {\r\n    // Handle any unhandled promise rejections here, if necessary\r\n    console.error(error);\r\n    // You can choose to return a response or perform other actions instead of exiting\r\n});\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,eAAe;IACX,IAAI;QACA,qCAAqC;QACrC,MAAM,OAAO,QAAQ;QACrB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,qCAAqC;QACrC,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,2CAA2C;QAC3C,oEAAoE;QACpE,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,oBAAoB,KAAK,CAAC,CAAC;IACvB,6DAA6D;IAC7D,QAAQ,KAAK,CAAC;AACd,kFAAkF;AACtF;uCAEe","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/10/WORKING/sleeping-owl/src/utils/authUtils.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { jwtVerify } from 'jose';\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\r\nconst SESSION_TIMEOUT = process.env.SESSION_TIMEOUT || '3h';\r\n\r\nexport function generateToken(adminId: number, adminRole: string) {\r\n    return jwt.sign({ adminId, adminRole }, SECRET_KEY, { expiresIn: SESSION_TIMEOUT });\r\n}\r\n\r\nexport async function verifyToken(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, new TextEncoder().encode(SECRET_KEY));\r\n        return { payload, status: true, message: \"Token is valid\" };\r\n    } catch (error) {\r\n        let message = \"Authentication failed. Please try again.\";\r\n\r\n        if (typeof error === \"object\" && error !== null && \"code\" in error) {\r\n            const err = error as { code: string };\r\n            if (err.code === 'ERR_JWT_EXPIRED') {\r\n                message = \"Session expired. Please log in again.\";\r\n            }\r\n        }\r\n        return { payload: null, status: false, message };\r\n    }\r\n}\r\n\r\n// Check if admin exists in the database\r\nexport async function isUserExist(adminId: number, adminRole: string) {\r\n    try {\r\n        const adminRoleStr = String(adminRole); // Ensure it's a string\r\n        const adminModel = [\"admin\", \"dropshipper\", \"supplier\"].includes(adminRoleStr) ? \"admin\" : \"adminStaff\";\r\n\r\n        // Fetch admin details from database\r\n        let admin\r\n        if (adminModel === \"admin\") {\r\n            admin = await prisma.admin.findUnique({\r\n                where: { id: adminId, role: adminRoleStr },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        } else {\r\n            admin = await prisma.adminStaff.findUnique({\r\n                where: { id: adminId, role: adminRoleStr },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        }\r\n\r\n        // If admin doesn't exist, return false with a message\r\n        if (!admin) {\r\n            return { status: false, message: \"User with the provided ID does not exist\" };\r\n        }\r\n\r\n        // Return admin details if found\r\n        return { status: true, admin };\r\n    } catch (error) {\r\n        console.error(\"Error fetching admin by ID:\", error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAC7C,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAEhD,SAAS,cAAc,OAAe,EAAE,SAAiB;IAC5D,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;QAAS;IAAU,GAAG,YAAY;QAAE,WAAW;IAAgB;AACrF;AAEO,eAAe,YAAY,KAAa;IAC3C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,IAAI,cAAc,MAAM,CAAC;QACpE,OAAO;YAAE;YAAS,QAAQ;YAAM,SAAS;QAAiB;IAC9D,EAAE,OAAO,OAAO;QACZ,IAAI,UAAU;QAEd,IAAI,OAAO,UAAU,YAAY,UAAU,QAAQ,UAAU,OAAO;YAChE,MAAM,MAAM;YACZ,IAAI,IAAI,IAAI,KAAK,mBAAmB;gBAChC,UAAU;YACd;QACJ;QACA,OAAO;YAAE,SAAS;YAAM,QAAQ;YAAO;QAAQ;IACnD;AACJ;AAGO,eAAe,YAAY,OAAe,EAAE,SAAiB;IAChE,IAAI;QACA,MAAM,eAAe,OAAO,YAAY,uBAAuB;QAC/D,MAAM,aAAa;YAAC;YAAS;YAAe;SAAW,CAAC,QAAQ,CAAC,gBAAgB,UAAU;QAE3F,oCAAoC;QACpC,IAAI;QACJ,IAAI,eAAe,SAAS;YACxB,QAAQ,MAAM,sHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE,IAAI;oBAAS,MAAM;gBAAa;gBACzC,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ,OAAO;YACH,QAAQ,MAAM,sHAAA,CAAA,UAAM,CAAC,UAAU,CAAC,UAAU,CAAC;gBACvC,OAAO;oBAAE,IAAI;oBAAS,MAAM;gBAAa;gBACzC,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ;QAEA,sDAAsD;QACtD,IAAI,CAAC,OAAO;YACR,OAAO;gBAAE,QAAQ;gBAAO,SAAS;YAA2C;QAChF;QAEA,gCAAgC;QAChC,OAAO;YAAE,QAAQ;YAAM;QAAM;IACjC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAwB;IAC7D;AACJ","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/10/WORKING/sleeping-owl/src/utils/hashUtils.ts"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\n\r\nexport async function hashPassword(password: string) {\r\n    const salt = await bcrypt.genSalt(10);\r\n    return bcrypt.hash(password, salt);\r\n}\r\n\r\nexport async function comparePassword(password: string, hashedPassword: string) {\r\n    return bcrypt.compare(password, hashedPassword);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IAC/C,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;IAClC,OAAO,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACjC;AAEO,eAAe,gBAAgB,QAAgB,EAAE,cAAsB;IAC1E,OAAO,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AACpC","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/10/WORKING/sleeping-owl/src/app/api/controllers/admin/authController.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport prisma from \"@/lib/prisma\";\r\nimport { generateToken } from '@/utils/authUtils';\r\nimport { comparePassword } from '@/utils/hashUtils';\r\nimport { verifyToken } from '@/utils/authUtils';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport async function handleLogin(req: NextRequest, adminRole: string, adminStaffRole: string) {\r\n    try {\r\n        const { email, password } = await req.json();\r\n\r\n        // Hash the password using bcrypt\r\n        const salt = await bcrypt.genSalt(10); // Generates a salt with 10 rounds\r\n        const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n        console.log(`Hashed Password: ${hashedPassword}`); // Log the hashed password\r\n\r\n        // Fetch admin by email and role\r\n        let adminResponse = await adminByUsernameRole(email, adminRole);\r\n        if (!adminResponse.status || !adminResponse.admin) {\r\n            adminResponse = await adminByUsernameRole(email, adminStaffRole);\r\n            if (!adminResponse.status || !adminResponse.admin) {\r\n                return NextResponse.json({ message: adminResponse.message || \"Invalid email or password\", status: false }, { status: 401 });\r\n            }\r\n        }\r\n\r\n        const admin = adminResponse.admin;\r\n\r\n        // Compare the provided password with the stored hash\r\n        const isPasswordValid = await comparePassword(password, admin.password);\r\n        if (!isPasswordValid) {\r\n            return NextResponse.json({ message: 'Invalid email or password', status: false }, { status: 401 });\r\n        }\r\n\r\n        // Generate authentication token\r\n        const token = generateToken(admin.id, admin.role);\r\n        return NextResponse.json({\r\n            message: \"Login successful\",\r\n            token,\r\n            admin: {\r\n                id: admin.id,\r\n                name: admin.name,\r\n                email: admin.email,\r\n                role: admin.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error during login:`, error);\r\n        return NextResponse.json({ message: \"Internal Server Error\", status: false }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function handleVerifyLogin(req: NextRequest, adminRole: string, adminStaffRole: string) {\r\n    try {\r\n        // Extract token from Authorization header\r\n        const token = req.headers.get('authorization')?.split(' ')[1];\r\n        if (!token) {\r\n            return NextResponse.json({ message: 'No token provided', status: false }, { status: 401 });\r\n        }\r\n\r\n        // Verify token and extract admin details\r\n        const { payload, status, message } = await verifyToken(token);\r\n        if (!status || !payload || typeof payload.adminId !== 'number') {\r\n            return NextResponse.json({ message: message, status: false }, { status: 403 });\r\n        }\r\n\r\n        // Determine the admin model based on role\r\n        const payloadAdminRole = String(payload.adminRole); // Ensure it's a string\r\n\r\n        if (![adminRole, adminStaffRole].includes(payloadAdminRole)) {\r\n            return NextResponse.json({ message: \"Access denied. Invalid role.\", status: false }, { status: 403 });\r\n        }\r\n\r\n        const adminModel = [\"admin\", \"dropshipper\", \"supplier\"].includes(payloadAdminRole) ? \"admin\" : \"adminStaff\";\r\n\r\n        // Fetch the admin from the database\r\n        let admin\r\n        if (adminModel === \"admin\") {\r\n            admin = await prisma.admin.findUnique({\r\n                where: { id: payload.adminId },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    role: true,\r\n                    createdAt: true,\r\n                },\r\n            });\r\n        } else {\r\n            admin = await prisma.adminStaff.findUnique({\r\n                where: { id: payload.adminId },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    role: true,\r\n                    createdAt: true,\r\n                },\r\n            });\r\n        }\r\n\r\n        if (!admin) {\r\n            return NextResponse.json({ message: \"Invalid email or password\", status: false }, { status: 401 });\r\n        }\r\n\r\n        return NextResponse.json({ message: \"Token is valid\", admin, status: true });\r\n    } catch (error) {\r\n        console.error(`error - `, error);\r\n        return NextResponse.json({ message: \"Internal Server Error\", status: false }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function adminByUsernameRole(username: string, role: string) {\r\n    try {\r\n\r\n        const adminRoleStr = String(role); // Ensure it's a string\r\n        const adminModel = [\"admin\", \"dropshipper\", \"supplier\"].includes(adminRoleStr) ? \"admin\" : \"adminStaff\";\r\n\r\n        // Fetch admin details from database\r\n        let admin\r\n        if (adminModel === \"admin\") {\r\n            admin = await prisma.admin.findFirst({\r\n                where: { email: username, role },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        } else {\r\n            admin = await prisma.adminStaff.findFirst({\r\n                where: { email: username, role },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true,\r\n                    role: true,\r\n                },\r\n            });\r\n        }\r\n\r\n        // If admin doesn't exist, return false with a message\r\n        if (!admin) {\r\n            return { status: false, message: \"User with the provided ID does not exist\" };\r\n        }\r\n\r\n        return { status: true, admin };\r\n    } catch (error) {\r\n        console.error(`Error fetching admin:`, error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/10/WORKING/sleeping-owl/src/app/api/admin/auth/login/route.ts"],"sourcesContent":["import { handleLogin } from '../../../controllers/admin/authController';\r\nimport { NextRequest } from 'next/server';\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const adminRole = \"admin\";\r\n    const adminStaffRole = \"admin_staff\";\r\n    return handleLogin(req, adminRole, adminStaffRole);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAGO,eAAe,KAAK,GAAgB;IACvC,MAAM,YAAY;IAClB,MAAM,iBAAiB;IACvB,OAAO,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD,EAAE,KAAK,WAAW;AACvC","debugId":null}}]
}