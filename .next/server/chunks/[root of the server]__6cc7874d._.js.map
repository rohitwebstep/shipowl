{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/09/WORKING/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        // Attempt to connect to the database\r\n        await prisma.$connect();\r\n        console.log(\"Database connection established successfully.\");\r\n    } catch (error) {\r\n        // If connection fails, log the error\r\n        console.error(\"Database connection failed:\", error);\r\n        // Avoid using process.exit in Edge Runtime\r\n        // Instead, you can throw an error to be handled by the calling code\r\n        throw new Error(\"Database connection failed\");\r\n    }\r\n}\r\n\r\nconnectToDatabase().catch((error) => {\r\n    // Handle any unhandled promise rejections here, if necessary\r\n    console.error(error);\r\n    // You can choose to return a response or perform other actions instead of exiting\r\n});\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,eAAe;IACX,IAAI;QACA,qCAAqC;QACrC,MAAM,OAAO,QAAQ;QACrB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,qCAAqC;QACrC,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,2CAA2C;QAC3C,oEAAoE;QACpE,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,oBAAoB,KAAK,CAAC,CAAC;IACvB,6DAA6D;IAC7D,QAAQ,KAAK,CAAC;AACd,kFAAkF;AACtF;uCAEe","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/09/WORKING/sleeping-owl/src/utils/authUtils.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { jwtVerify } from 'jose';\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\r\n\r\nexport function generateToken(adminId: number, adminRole: string) {\r\n    return jwt.sign({ adminId, adminRole }, SECRET_KEY, { expiresIn: '1h' });\r\n}\r\n\r\nexport async function verifyToken(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, new TextEncoder().encode(SECRET_KEY));\r\n        return { payload, status: true, message: \"Token is valid\" };\r\n    } catch (error) {\r\n        let message = \"Authentication failed. Please try again.\";\r\n\r\n        if (typeof error === \"object\" && error !== null && \"code\" in error) {\r\n            const err = error as { code: string };\r\n            if (err.code === 'ERR_JWT_EXPIRED') {\r\n                message = \"Session expired. Please log in again.\";\r\n            }\r\n        }\r\n        return { payload: null, status: false, message };\r\n    }\r\n}\r\n\r\n// Check if admin exists in the database\r\nexport async function isUserExist(adminId: number, adminRole: string) {\r\n    try {\r\n        const adminRoleStr = String(adminRole); // Ensure it's a string\r\n        const adminModel = [\"admin\", \"dropshipper\", \"supplier\"].includes(adminRoleStr) ? \"admin\" : \"adminStaff\";\r\n\r\n        // Fetch admin details from database\r\n        let admin\r\n        if (adminModel === \"admin\") {\r\n            admin = await prisma.admin.findUnique({\r\n                where: { id: adminId, role: adminRoleStr },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        } else {\r\n            admin = await prisma.adminStaff.findUnique({\r\n                where: { id: adminId, role: adminRoleStr },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        }\r\n\r\n        // If admin doesn't exist, return false with a message\r\n        if (!admin) {\r\n            return { status: false, message: \"User with the provided ID does not exist\" };\r\n        }\r\n\r\n        // Return admin details if found\r\n        return { status: true, admin };\r\n    } catch (error) {\r\n        console.error(\"Error fetching admin by ID:\", error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,SAAS,cAAc,OAAe,EAAE,SAAiB;IAC5D,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;QAAS;IAAU,GAAG,YAAY;QAAE,WAAW;IAAK;AAC1E;AAEO,eAAe,YAAY,KAAa;IAC3C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,IAAI,cAAc,MAAM,CAAC;QACpE,OAAO;YAAE;YAAS,QAAQ;YAAM,SAAS;QAAiB;IAC9D,EAAE,OAAO,OAAO;QACZ,IAAI,UAAU;QAEd,IAAI,OAAO,UAAU,YAAY,UAAU,QAAQ,UAAU,OAAO;YAChE,MAAM,MAAM;YACZ,IAAI,IAAI,IAAI,KAAK,mBAAmB;gBAChC,UAAU;YACd;QACJ;QACA,OAAO;YAAE,SAAS;YAAM,QAAQ;YAAO;QAAQ;IACnD;AACJ;AAGO,eAAe,YAAY,OAAe,EAAE,SAAiB;IAChE,IAAI;QACA,MAAM,eAAe,OAAO,YAAY,uBAAuB;QAC/D,MAAM,aAAa;YAAC;YAAS;YAAe;SAAW,CAAC,QAAQ,CAAC,gBAAgB,UAAU;QAE3F,oCAAoC;QACpC,IAAI;QACJ,IAAI,eAAe,SAAS;YACxB,QAAQ,MAAM,sHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE,IAAI;oBAAS,MAAM;gBAAa;gBACzC,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ,OAAO;YACH,QAAQ,MAAM,sHAAA,CAAA,UAAM,CAAC,UAAU,CAAC,UAAU,CAAC;gBACvC,OAAO;oBAAE,IAAI;oBAAS,MAAM;gBAAa;gBACzC,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ;QAEA,sDAAsD;QACtD,IAAI,CAAC,OAAO;YACR,OAAO;gBAAE,QAAQ;gBAAO,SAAS;YAA2C;QAChF;QAEA,gCAAgC;QAChC,OAAO;YAAE,QAAQ;YAAM;QAAM;IACjC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAwB;IAC7D;AACJ","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/09/WORKING/sleeping-owl/src/app/models/category.ts"],"sourcesContent":["import prisma from \"@/lib/prisma\";\r\n\r\ninterface Category {\r\n    name: string;\r\n    description: string;\r\n    status: boolean;\r\n    image?: string;\r\n}\r\n\r\nexport async function generateCategorySlug(name: string) {\r\n    let slug = name.toLowerCase().replace(/[^a-z0-9]/g, '-');\r\n    let isSlugTaken = true;\r\n    let suffix = 0;\r\n\r\n    // Keep checking until an unused slug is found\r\n    while (isSlugTaken) {\r\n        const existingCategory = await prisma.category.findUnique({\r\n            where: { slug },\r\n        });\r\n\r\n        if (existingCategory) {\r\n            // If the slug already exists, add a suffix (-1, -2, etc.)\r\n            suffix++;\r\n            slug = `${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${suffix}`;\r\n        } else {\r\n            // If the slug is not taken, set isSlugTaken to false to exit the loop\r\n            isSlugTaken = false;\r\n        }\r\n    }\r\n\r\n    return slug;\r\n}\r\n\r\nexport async function createCategory(adminId: number, adminRole: string, category: Category) {\r\n\r\n    try {\r\n        const { name, description, status, image } = category;\r\n\r\n        // Generate a unique slug for the category\r\n        const slug = await generateCategorySlug(name);\r\n\r\n        const newCategory = await prisma.category.create({\r\n            data: {\r\n                name,\r\n                description,\r\n                status,\r\n                slug,\r\n                image,\r\n                createdAt: new Date(),\r\n                createdBy: adminId,\r\n                createdByRole: adminRole,\r\n            },\r\n        });\r\n\r\n        return { status: true, category: newCategory };\r\n    } catch (error) {\r\n        console.error(`Error creating category:`, error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}\r\n\r\n// 🟡 UPDATE\r\nexport const updateCategory = async (\r\n    adminId: number,\r\n    adminRole: string,\r\n    categoryId: number,\r\n    data: Category\r\n) => {\r\n    try {\r\n        data.updatedBy = adminId;\r\n        data.updatedAt = new Date();\r\n        data.updatedByRole = adminRole;\r\n\r\n        const category = await prisma.category.update({\r\n            where: { id: categoryId }, // Assuming 'id' is the correct primary key field\r\n            data: data,\r\n        });\r\n\r\n        return { status: true, category };\r\n    } catch (error) {\r\n        console.error(\"❌ updateCategory Error:\", error);\r\n        return { status: false, message: \"Error updating category\" };\r\n    }\r\n};\r\n\r\n// 🔵 GET BY ID\r\nexport const getCategoryById = async (id: number) => {\r\n    try {\r\n        const category = await prisma.category.findUnique({\r\n            where: { id },\r\n        });\r\n\r\n        if (!category) return { status: false, message: \"Category not found\" };\r\n        return { status: true, category };\r\n    } catch (error) {\r\n        console.error(\"❌ getCategoryById Error:\", error);\r\n        return { status: false, message: \"Error fetching category\" };\r\n    }\r\n};\r\n\r\n// 🟣 GET ALL\r\nexport const getAllCategories = async () => {\r\n    try {\r\n        const categories = await prisma.category.findMany({\r\n            orderBy: { id: 'desc' },\r\n        });\r\n        return { status: true, categories };\r\n    } catch (error) {\r\n        console.error(\"❌ getAllCategories Error:\", error);\r\n        return { status: false, message: \"Error fetching categories\" };\r\n    }\r\n};\r\n\r\n// 🔴 DELETE\r\nexport const deleteCategory = async (id: number) => {\r\n    try {\r\n        await prisma.category.delete({ where: { id } });\r\n        return { status: true, message: \"Category deleted successfully\" };\r\n    } catch (error) {\r\n        console.error(\"❌ deleteCategory Error:\", error);\r\n        return { status: false, message: \"Error deleting category\" };\r\n    }\r\n};"],"names":[],"mappings":";;;;;;;;AAAA;;AASO,eAAe,qBAAqB,IAAY;IACnD,IAAI,OAAO,KAAK,WAAW,GAAG,OAAO,CAAC,cAAc;IACpD,IAAI,cAAc;IAClB,IAAI,SAAS;IAEb,8CAA8C;IAC9C,MAAO,YAAa;QAChB,MAAM,mBAAmB,MAAM,sHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YACtD,OAAO;gBAAE;YAAK;QAClB;QAEA,IAAI,kBAAkB;YAClB,0DAA0D;YAC1D;YACA,OAAO,GAAG,KAAK,WAAW,GAAG,OAAO,CAAC,cAAc,KAAK,CAAC,EAAE,QAAQ;QACvE,OAAO;YACH,sEAAsE;YACtE,cAAc;QAClB;IACJ;IAEA,OAAO;AACX;AAEO,eAAe,eAAe,OAAe,EAAE,SAAiB,EAAE,QAAkB;IAEvF,IAAI;QACA,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG;QAE7C,0CAA0C;QAC1C,MAAM,OAAO,MAAM,qBAAqB;QAExC,MAAM,cAAc,MAAM,sHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7C,MAAM;gBACF;gBACA;gBACA;gBACA;gBACA;gBACA,WAAW,IAAI;gBACf,WAAW;gBACX,eAAe;YACnB;QACJ;QAEA,OAAO;YAAE,QAAQ;YAAM,UAAU;QAAY;IACjD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,wBAAwB,CAAC,EAAE;QAC1C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAwB;IAC7D;AACJ;AAGO,MAAM,iBAAiB,OAC1B,SACA,WACA,YACA;IAEA,IAAI;QACA,KAAK,SAAS,GAAG;QACjB,KAAK,SAAS,GAAG,IAAI;QACrB,KAAK,aAAa,GAAG;QAErB,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC1C,OAAO;gBAAE,IAAI;YAAW;YACxB,MAAM;QACV;QAEA,OAAO;YAAE,QAAQ;YAAM;QAAS;IACpC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;YAAE,QAAQ;YAAO,SAAS;QAA0B;IAC/D;AACJ;AAGO,MAAM,kBAAkB,OAAO;IAClC,IAAI;QACA,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE;YAAG;QAChB;QAEA,IAAI,CAAC,UAAU,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAqB;QACrE,OAAO;YAAE,QAAQ;YAAM;QAAS;IACpC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAA0B;IAC/D;AACJ;AAGO,MAAM,mBAAmB;IAC5B,IAAI;QACA,MAAM,aAAa,MAAM,sHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC9C,SAAS;gBAAE,IAAI;YAAO;QAC1B;QACA,OAAO;YAAE,QAAQ;YAAM;QAAW;IACtC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAA4B;IACjE;AACJ;AAGO,MAAM,iBAAiB,OAAO;IACjC,IAAI;QACA,MAAM,sHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE;YAAG;QAAE;QAC7C,OAAO;YAAE,QAAQ;YAAM,SAAS;QAAgC;IACpE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;YAAE,QAAQ;YAAO,SAAS;QAA0B;IAC/D;AACJ","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/09/WORKING/sleeping-owl/src/app/api/category/%5BcategoryId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { isUserExist } from \"@/utils/authUtils\";\r\nimport { getCategoryById } from '@/app/models/category';\r\n\r\nexport async function GET(\r\n  req: NextRequest,\r\n  { params }: { params: { categoryId: string } } // Use inline typing without a separate interface\r\n) {\r\n  try {\r\n    const adminId = req.headers.get('x-admin-id');\r\n    const adminRole = req.headers.get('x-admin-role');\r\n\r\n    if (!adminId || isNaN(Number(adminId))) {\r\n      return NextResponse.json({ error: 'Invalid or missing admin ID' }, { status: 400 });\r\n    }\r\n\r\n    const userCheck = await isUserExist(Number(adminId), String(adminRole));\r\n    if (!userCheck.status) {\r\n      return NextResponse.json({ error: `User Not Found: ${userCheck.message}` }, { status: 404 });\r\n    }\r\n\r\n    const { categoryId } = params;\r\n    const categoryIdNum = Number(categoryId);\r\n    if (isNaN(categoryIdNum)) {\r\n      return NextResponse.json({ error: 'Invalid category ID' }, { status: 400 });\r\n    }\r\n\r\n    const categoryResult = await getCategoryById(categoryIdNum);\r\n    if (categoryResult?.status) {\r\n      return NextResponse.json({ status: true, category: categoryResult.category }, { status: 200 });\r\n    }\r\n\r\n    return NextResponse.json({ status: false, message: 'Category not found' }, { status: 404 });\r\n  } catch (error) {\r\n    console.error('❌ Error fetching single category:', error);\r\n    return NextResponse.json({ status: false, error: 'Server error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAAsC,CAAC,iDAAiD;AAAlD;IAE9C,IAAI;QACF,MAAM,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;QAChC,MAAM,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC;QAElC,IAAI,CAAC,WAAW,MAAM,OAAO,WAAW;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,YAAY,MAAM,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD,EAAE,OAAO,UAAU,OAAO;QAC5D,IAAI,CAAC,UAAU,MAAM,EAAE;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,gBAAgB,EAAE,UAAU,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC5F;QAEA,MAAM,EAAE,UAAU,EAAE,GAAG;QACvB,MAAM,gBAAgB,OAAO;QAC7B,IAAI,MAAM,gBAAgB;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD,EAAE;QAC7C,IAAI,gBAAgB,QAAQ;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,QAAQ;gBAAM,UAAU,eAAe,QAAQ;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC9F;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;YAAO,SAAS;QAAqB,GAAG;YAAE,QAAQ;QAAI;IAC3F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;YAAO,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}