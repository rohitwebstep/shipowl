{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep2/shipping-owl/node_modules/bwip-js/dist/bwip-js-node.mjs"],"sourcesContent":["// This file is part of the bwip-js project available at:\n//\n//    http://metafloor.github.io/bwip-js\n//\n// Copyright (c) 2011-2025 Mark Warren\n//\n// This file contains code automatically generated from:\n// Barcode Writer in Pure PostScript - Version 2025-04-19\n// Copyright (c) 2004-2024 Terry Burton\n//\n// The MIT License\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\"use strict\";\n\nimport { bwipp_auspost,bwipp_azteccode,bwipp_azteccodecompact,bwipp_aztecrune,bwipp_bc412,bwipp_channelcode,bwipp_codablockf,bwipp_code11,bwipp_code128,bwipp_code16k,bwipp_code2of5,bwipp_code32,bwipp_code39,bwipp_code39ext,bwipp_code49,bwipp_code93,bwipp_code93ext,bwipp_codeone,bwipp_coop2of5,bwipp_daft,bwipp_databarexpanded,bwipp_databarexpandedcomposite,bwipp_databarexpandedstacked,bwipp_databarexpandedstackedcomposite,bwipp_databarlimited,bwipp_databarlimitedcomposite,bwipp_databaromni,bwipp_databaromnicomposite,bwipp_databarstacked,bwipp_databarstackedcomposite,bwipp_databarstackedomni,bwipp_databarstackedomnicomposite,bwipp_databartruncated,bwipp_databartruncatedcomposite,bwipp_datalogic2of5,bwipp_datamatrix,bwipp_datamatrixrectangular,bwipp_datamatrixrectangularextension,bwipp_dotcode,bwipp_ean13,bwipp_ean13composite,bwipp_ean14,bwipp_ean2,bwipp_ean5,bwipp_ean8,bwipp_ean8composite,bwipp_flattermarken,bwipp_gs1_128,bwipp_gs1_128composite,bwipp_gs1_cc,bwipp_gs1datamatrix,bwipp_gs1datamatrixrectangular,bwipp_gs1dldatamatrix,bwipp_gs1dlqrcode,bwipp_gs1dotcode,bwipp_gs1northamericancoupon,bwipp_gs1qrcode,bwipp_hanxin,bwipp_hibcazteccode,bwipp_hibccodablockf,bwipp_hibccode128,bwipp_hibccode39,bwipp_hibcdatamatrix,bwipp_hibcdatamatrixrectangular,bwipp_hibcmicropdf417,bwipp_hibcpdf417,bwipp_hibcqrcode,bwipp_iata2of5,bwipp_identcode,bwipp_industrial2of5,bwipp_interleaved2of5,bwipp_isbn,bwipp_ismn,bwipp_issn,bwipp_itf14,bwipp_jabcode,bwipp_japanpost,bwipp_kix,bwipp_leitcode,bwipp_mailmark,bwipp_mands,bwipp_matrix2of5,bwipp_maxicode,bwipp_micropdf417,bwipp_microqrcode,bwipp_msi,bwipp_onecode,bwipp_pdf417,bwipp_pdf417compact,bwipp_pharmacode,bwipp_pharmacode2,bwipp_planet,bwipp_plessey,bwipp_posicode,bwipp_postnet,bwipp_pzn,bwipp_qrcode,bwipp_rationalizedCodabar,bwipp_raw,bwipp_rectangularmicroqrcode,bwipp_royalmail,bwipp_sscc18,bwipp_swissqrcode,bwipp_symbol,bwipp_telepen,bwipp_telepennumeric,bwipp_ultracode,bwipp_upca,bwipp_upcacomposite,bwipp_upce,bwipp_upcecomposite,bwipp_lookup,bwipp_encode,BWIPP_VERSION } from './bwipp.mjs';\n\n// exports.js\nconst BWIPJS_VERSION = '4.6.0 (2025-04-20)';\n\nimport url from 'url';\nimport PNG_ZLIB from 'zlib';\nimport 'stream';  // fix for https://github.com/nodejs/node/issues/37021\n\n// bwipjs.request(req, res [, overrides])\n//\n// Returns a PNG image from the query args of a node.js http request object.\n//\n// This function is asynchronous.\nfunction Request(req, res, extra) {\n    var opts = url.parse(req.url, true).query;\n\n    // Convert empty !parameters to false.\n    // Convert empty parameters to true.\n    for (var id in opts) {\n        if (opts[id] === '') {\n            if (id[0] == '!') {\n                opts[id.substr(1)] = false;\n            } else {\n                opts[id] = true;\n            }\n        }\n    }\n\n    // Add in server options/overrides\n    if (extra) {\n        for (var id in extra) {\n            opts[id] = extra[id];\n        }\n    }\n\n    ToBuffer(opts, function(err, png) {\n        if (err) {\n            res.writeHead(400, { 'Content-Type':'text/plain' });\n            res.end('' + (err.stack || err), 'utf-8');\n        } else {\n            res.writeHead(200, { 'Content-Type':'image/png' });\n            res.end(png, 'binary');\n        }\n    });\n}\n\n// bwipjs.toBuffer(options[, callback])\n//\n// Uses the built-in graphics drawing and zlib PNG encoding to return a\n// barcode image in a node.js Buffer.\n//\n// `options` are a bwip-js/BWIPP options object.\n// `callback` is an optional callback handler with prototype:\n//\n//      function callback(err, png)\n//\n//      `err` is an Error object or string.  If `err` is set, `png` is null.\n//      `png` is a node Buffer containing the PNG image.\n//\n// If `callback` is not provided, a Promise is returned.\nfunction ToBuffer(opts, callback) {\n    return _ToAny(bwipp_lookup(opts.bcid), opts, callback);\n}\n\n// Entry point for the symbol-specific exports.\n//\n// Polymorphic internal interface\n// _ToAny(encoder, opts) : Promise<Buffer>\n// _ToAny(endoder, opts, drawing) : any !throws!\n// _ToAny(encoder, opts, callback) : void\n//\n// If `drawing` is not provided or `callback` is, the built-in DrawingZlibPng will be used.\nfunction _ToAny(encoder, opts, drawing) {\n    var callback;\n    if (typeof drawing == 'function') {\n        callback = drawing;\n        drawing = null\n    }\n    if (drawing) {\n        return _Render(encoder, opts, drawing);\n    } else if (callback) {\n        try {\n            _Render(encoder, opts, DrawingZlibPng(callback));\n        } catch (e) {\n            callback(e);\n        }\n    } else {\n        return new Promise(function (resolve, reject) {\n                _Render(encoder, opts, DrawingZlibPng(function (err, buf) {\n                                err ? reject(err) : resolve(buf);\n                            }));\n            });\n    }\n}\n\n// bwipjs.toSVG(options)\n//\n// Uses the built-in svg drawing interface.\n//\n// `options` are a bwip-js/BWIPP options object.\n//\n// This function is synchronous and throws on error.\n//\n// Returns a string containing a fully qualified SVG definition,\n// including the natural width and height of the image, in pixels:\n//\n//  <svg viewBox=\"0 0 242 200\" xmlns=\"http://www.w3.org/2000/svg\">\n//   ...\n//  </svg>\n//\n// Available on all platforms.\nfunction ToSVG(opts) {\n    return _Render(bwipp_lookup(opts.bcid), opts, DrawingSVG());\n}\n\nfunction FixupOptions(opts) {\n    var scale   = opts.scale || 2;\n    var scaleX  = +opts.scaleX || scale;\n    var scaleY  = +opts.scaleY || scaleX;\n\n    // Fix up padding.\n    opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);\n    opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);\n    opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);\n    opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);\n\n    // We override BWIPP's background color functionality.  If in CMYK, convert to RRGGBB so\n    // the drawing interface is consistent.  Likewise, if in CSS-style #rgb or #rrggbb.\n    if (opts.backgroundcolor) {\n        var bgc = ''+opts.backgroundcolor;\n        if (/^[0-9a-fA-F]{8}$/.test(bgc)) {\n            var c = parseInt(bgc.substr(0,2), 16) / 255;\n            var m = parseInt(bgc.substr(2,2), 16) / 255;\n            var y = parseInt(bgc.substr(4,2), 16) / 255;\n            var k = parseInt(bgc.substr(6,2), 16) / 255;\n            var r = Math.floor((1-c) * (1-k) * 255).toString(16);\n            var g = Math.floor((1-m) * (1-k) * 255).toString(16);\n            var b = Math.floor((1-y) * (1-k) * 255).toString(16);\n            opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +\n                                   (g.length == 1 ? '0' : '') + g +\n                                   (b.length == 1 ? '0' : '') + b;\n        } else {\n            if (bgc[0] == '#') {\n                bgc = bgc.substr(1);\n            }\n            if (/^[0-9a-fA-F]{6}$/.test(bgc)) {\n                opts.backgroundcolor = bgc;\n            } else if (/^[0-9a-fA-F]{3}$/.test(bgc)) {\n                opts.backgroundcolor = bgc[0] + bgc[0] + bgc[1] + bgc[1] + bgc[2] + bgc[2];\n            } else {\n                throw new Error('bwip-js: invalid backgroundcolor: ' + opts.backgroundcolor);\n            }\n        }\n    }\n\n    return opts;\n\n    // a is the most specific padding value, e.g. paddingleft\n    // b is the next most specific value, e.g. paddingwidth\n    // c is the general padding value.\n    // s is the scale, either scalex or scaley\n    function padding(a, b, c, s) {\n        if (a != null) {\n            a = a >>> 0;\n            return a*s >>> 0;\n        }\n        if (b != null) {\n            b = b >>> 0;\n            return b*s >>> 0;\n        }\n        c = c >>> 0;\n        return (c*s >>> 0) || 0;\n    }\n}\n\nvar BWIPJS_OPTIONS = {\n    bcid:1,\n    text:1,\n    scale:1,\n    scaleX:1,\n    scaleY:1,\n    rotate:1,\n    padding:1,\n    paddingwidth:1,\n    paddingheight:1,\n    paddingtop:1,\n    paddingleft:1,\n    paddingright:1,\n    paddingbottom:1,\n    backgroundcolor:1,\n};\n\n// bwipjs.render(options, drawing)\n//\n// Renders a barcode using the provided drawing object.\n//\n// This function is synchronous and throws on error.\n//\n// Browser and nodejs usage.\nfunction Render(options, drawing) {\n    return _Render(bwipp_lookup(options.bcid), options, drawing);\n}\n\n// Called by the public exports\nfunction _Render(encoder, options, drawing) {\n    var text = options.text;\n    if (!text) {\n        throw new ReferenceError('bwip-js: bar code text not specified.');\n    }\n\n    // setopts() is optional on the drawing object.\n    FixupOptions(options);\n    drawing.setopts && drawing.setopts(options);\n\n    // Set the bwip-js defaults\n    var scale   = options.scale || 2;\n    var scaleX  = +options.scaleX || scale;\n    var scaleY  = +options.scaleY || scaleX;\n    var rotate  = options.rotate || 'N';\n\n    // Create a barcode writer object.  This is the interface between\n    // the low-level BWIPP code, the bwip-js graphics context, and the\n    // drawing interface.\n    var bw = new BWIPJS(drawing);\n\n    // Set the BWIPP options\n    var bwippopts = {};\n    for (var id in options) {\n        if (!BWIPJS_OPTIONS[id]) {\n            bwippopts[id] = options[id];\n        }\n    }\n\n    // Fix a disconnect in the BWIPP rendering logic\n    if (bwippopts.alttext) {\n        bwippopts.includetext = true;\n    }\n    // We use mm rather than inches for height - except pharmacode2 height\n    // which is already in mm.\n    if (+bwippopts.height && encoder != bwipp_pharmacode2) {\n        bwippopts.height = bwippopts.height / 25.4 || 0.5;\n    }\n    // Likewise, width\n    if (+bwippopts.width) {\n        bwippopts.width = bwippopts.width / 25.4 || 0;\n    }\n\n    // Scale the image\n    bw.scale(scaleX, scaleY);\n\n    // Call into the BWIPP cross-compiled code and render the image.\n    bwipp_encode(bw, encoder, text, bwippopts);\n\n    // Returns whatever drawing.end() returns, or `false` if nothing rendered.\n    return bw.render();\n}\n\n// bwipjs.raw(options)\n// bwipjs.raw(bcid, text, opts-string)\n//\n// Invokes the low level BWIPP code and returns the raw encoding data.\n//\n// This function is synchronous and throws on error.\n//\n// Browser and nodejs usage.\nfunction ToRaw(bcid, text, options) {\n    if (arguments.length == 1) {\n        options = bcid;\n        bcid = options.bcid;\n        text = options.text;\n    }\n\n    // The drawing interface is just needed for the pre-init() calls.\n    // Don't need to fixup the drawing specific options.\n    var drawing = DrawingBuiltin();\n    drawing.setopts(options);\n\n    var bw = new BWIPJS(drawing);\n    var stack = bwipp_encode(bw, bwipp_lookup(bcid), text, options, true);\n\n    // bwip-js uses Maps to emulate PostScript dictionary objects; but Maps\n    // are not a typical/expected return value.  Convert to plain-old-objects.\n    var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };\n    for (var i = 0; i < stack.length; i++) {\n        var elt = stack[i];\n        if (elt instanceof Map) {\n            var obj = {};\n            // Could they make Maps any harder to iterate over???\n            for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {\n                var id = keys.next().value;\n                if (ids[id]) {\n                    var val = elt.get(id);\n                    if (val instanceof Array) {\n                        // The postscript arrays have extra named properties\n                        // to emulate array views.  Return cleaned up arrays.\n                        obj[id] = val.b.slice(val.o, val.o + val.length);\n                    } else {\n                        obj[id] = val;\n                    }\n                }\n            }\n            stack[i] = obj;\n        } else {\n            // This should never exec...\n            stack.splice(i--, 1);\n        }\n    }\n    return stack;\n}\n// file : bwipjs.js\n//\n// Graphics-context interface to the BWIPP cross-compiled code\n\nvar BWIPJS = (function() {\n\n// Math.floor(), etc. are notoriously slow.  Caching seems to help.\nvar floor = Math.floor;\nvar round = Math.round;\nvar ceil  = Math.ceil;\nvar min   = Math.min;\nvar max   = Math.max;\n\nfunction BWIPJS(drawing) {\n    if (this.constructor !== BWIPJS) {\n        return new BWIPJS(drawing);\n    }\n    this.gstk    = [];      // Graphics save/restore stack\n    this.cmds    = [];      // Graphics primitives to replay when rendering\n    this.drawing = drawing; // Drawing interface\n\n    this.reset();\n\n    // Drawing surface bounding box\n    this.minx = this.miny = Infinity;\n    this.maxx = this.maxy = -Infinity;\n};\n\n// All graphics state that must be saved/restored is given a prefix of g_\nBWIPJS.prototype.reset = function() {\n    // Current Transform Matrix - since we don't do rotation, we can fake\n    // the matrix math\n    this.g_tdx  = 0;        // CTM x-offset\n    this.g_tdy  = 0;        // CTM y-offset\n    this.g_tsx  = 1;        // CTM x-scale factor\n    this.g_tsy  = 1;        // CTM y-scale factor\n\n    this.g_posx = 0;        // current x position\n    this.g_posy = 0;        // current y position\n    this.g_penw = 1;        // current line/pen width\n    this.g_path = [];       // current path\n    this.g_font = null;     // current font object\n    this.g_rgb  = [0,0,0];  // current color (black)\n    this.g_clip = false;    // clip region active\n};\nBWIPJS.prototype.save = function() {\n    // clone all g_ properties\n    var ctx = {};\n    for (var id in this) {\n        if (id.indexOf('g_') == 0) {\n            ctx[id] = clone(this[id]);\n        }\n    }\n    this.gstk.push(ctx);\n\n    // Perform a deep clone of the graphics state properties\n    function clone(v) {\n        if (v instanceof Array) {\n            var t = [];\n            for (var i = 0; i < v.length; i++)\n                t[i] = clone(v[i]);\n            return t;\n        }\n        if (v instanceof Object) {\n            var t = {};\n            for (var id in v)\n                t[id] = clone(v[id]);\n            return t;\n        }\n        return v;\n    }\n};\nBWIPJS.prototype.restore = function() {\n    if (!this.gstk.length) {\n        throw new Error('grestore: stack underflow');\n    }\n    var ctx  = this.gstk.pop();\n    var self = this;\n    if (this.g_clip && !ctx.g_clip) {\n        this.cmds.push(function() {\n                self.drawing.unclip();\n            });\n    }\n    for (var id in ctx) {\n        this[id] = ctx[id];\n    }\n};\n// Per the postscript spec:\n//  As discussed in Section 4.4.1, Current Path, points entered into a path\n//  are immediately converted to device coordinates by the current\n//  transformation matrix (CTM); subsequent modifications to the CTM do not\n//  affect existing points.  `currentpoint` computes the user space\n//  coordinates corresponding to the current point according to the current\n//  value of the CTM. Thus, if a current point is set and then the CTM is\n//  changed, the coordinates returned by currentpoint will be different\n//  from those that were originally specified for the point.\nBWIPJS.prototype.currpos = function() {\n    return { x:(this.g_posx-this.g_tdx)/this.g_tsx,\n             y:(this.g_posy-this.g_tdy)/this.g_tsy\n        };\n};\nBWIPJS.prototype.currfont = function() {\n    return this.g_font;\n};\nBWIPJS.prototype.translate = function(x, y) {\n    this.g_tdx = this.g_tsx * x;\n    this.g_tdy = this.g_tsy * y;\n};\nBWIPJS.prototype.scale = function(x, y) {\n    this.g_tsx *= x;\n    this.g_tsy *= y;\n    var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);\n    if (sxy && sxy[0] && sxy[1]) {\n        this.g_tsx = sxy[0];\n        this.g_tsy = sxy[1];\n    }\n};\nBWIPJS.prototype.setlinewidth = function(w) {\n    this.g_penw = w;\n};\nBWIPJS.prototype.selectfont = function(f, z) {\n    this.g_font = { FontName:this.jsstring(f), FontSize:+z };\n};\nBWIPJS.prototype.getfont = function() {\n    return this.g_font.FontName;\n};\n// Special function for converting a Uint8Array string to string.\nBWIPJS.prototype.jsstring = function(s) {\n    if (s instanceof Uint8Array) {\n        // Postscript (like C) treats nul-char as end of string.\n        //for (var i = 0, l = s.length; i < l && s[i]; i++);\n        //if (i < l) {\n        //  return String.fromCharCode.apply(null,s.subarray(0, i));\n        //}\n        return String.fromCharCode.apply(null,s)\n    }\n    return ''+s;\n};\n// Special function to replace setanycolor in BWIPP.\n// Converts a string of hex digits either rgb, rrggbb or ccmmyykk.\n// Or CSS-style #rgb and #rrggbb.\nBWIPJS.prototype.setcolor = function(s) {\n    if (s instanceof Uint8Array) {\n        s = this.jsstring(s);\n    }\n    if (!s) {\n        return;\n    }\n    if (!/^(?:#?[0-9a-fA-F]{3}(?:[0-9a-fA-F]{3})?|[0-9a-fA-F]{8})$/.test(s)) {\n        throw new Error('bwip-js: invalid color: ' + s);\n    }\n    if (s[0] == '#') {\n        s = s.substr(1);\n    }\n    if (s.length == 3) {\n        var r = parseInt(s[0], 16);\n        var g = parseInt(s[1], 16);\n        var b = parseInt(s[2], 16);\n        this.g_rgb = [ r<<4|r, g<<4|g, b<<4|b ];\n    } else if (s.length == 6) {\n        var r = parseInt(s.substr(0,2), 16);\n        var g = parseInt(s.substr(2,2), 16);\n        var b = parseInt(s.substr(4,2), 16);\n        this.g_rgb = [ r, g, b ];\n    } else {\n        var c = parseInt(s.substr(0,2), 16) / 255;\n        var m = parseInt(s.substr(2,2), 16) / 255;\n        var y = parseInt(s.substr(4,2), 16) / 255;\n        var k = parseInt(s.substr(6,2), 16) / 255;\n        var r = round((1-c) * (1-k) * 255);\n        var g = round((1-m) * (1-k) * 255);\n        var b = round((1-y) * (1-k) * 255);\n        this.g_rgb = [ r, g, b ];\n    }\n};\n// Used only by swissqrcode\nBWIPJS.prototype.setrgbcolor = function(r,g,b) {\n    this.g_rgb = [ r, g, b ];\n};\n// Returns the current rgb values as a 'RRGGBB'\nBWIPJS.prototype.getRGB = function() {\n    var r = this.g_rgb[0].toString(16);\n    var g = this.g_rgb[1].toString(16);\n    var b = this.g_rgb[2].toString(16);\n    return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;\n};\nBWIPJS.prototype.newpath = function() {\n    this.g_path = [];\n};\nBWIPJS.prototype.closepath = function() {\n    var path = this.g_path;\n    var plen = path.length;\n    if (!plen) return;\n\n    var f = plen-1;\n    for ( ; f >= 0 && path[f].op == 'l'; f--);\n    f++;\n    if (f < plen-1) {\n        var poly = [];\n        var xmin = Infinity;\n        var ymin = Infinity;\n        var xmax = -Infinity;\n        var ymax = -Infinity;\n        for (var i = f; i < plen; i++) {\n            var a = path[i];\n            poly.push([ a.x0, a.y0 ]);\n            if (xmin > a.x0) xmin = a.x0;\n            if (xmax < a.x0) xmax = a.x0;\n            if (ymin > a.y0) ymin = a.y0;\n            if (ymax < a.y0) ymax = a.y0;\n        }\n        var a = path[plen-1];\n        var b = path[f];\n        if (a.x1 != b.x0 || a.y1 != b.y0) {\n            poly.push([ a.x1, a.y1 ]);\n            if (xmin > a.x1) xmin = a.x1;\n            if (xmax < a.x1) xmax = a.x1;\n            if (ymin > a.y1) ymin = a.y1;\n            if (ymax < a.y1) ymax = a.y1;\n        }\n        path.splice(f, plen-f,\n                    { op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });\n    } else {\n        path.push({ op:'c' });\n    }\n};\nBWIPJS.prototype.moveto = function(x,y) {\n    this.g_posx = this.g_tdx + this.g_tsx * x;\n    this.g_posy = this.g_tdy + this.g_tsy * y;\n};\nBWIPJS.prototype.rmoveto = function(x,y) {\n    this.g_posx += this.g_tsx * x;\n    this.g_posy += this.g_tsy * y;\n};\nBWIPJS.prototype.lineto = function(x,y) {\n    var x0 = round(this.g_posx);\n    var y0 = round(this.g_posy);\n    this.g_posx = this.g_tdx + this.g_tsx * x;\n    this.g_posy = this.g_tdy + this.g_tsy * y;\n    var x1 = round(this.g_posx);\n    var y1 = round(this.g_posy);\n\n    this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });\n};\nBWIPJS.prototype.rlineto = function(x,y) {\n    var x0 = round(this.g_posx);\n    var y0 = round(this.g_posy);\n    this.g_posx += this.g_tsx * x;\n    this.g_posy += this.g_tsy * y;\n    var x1 = round(this.g_posx);\n    var y1 = round(this.g_posy);\n\n    this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });\n};\n// implements both arc and arcn\nBWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {\n    if (sa == ea) {\n        return;\n    }\n    // For now, we only implement full circles...\n    if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {\n        throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');\n    }\n\n    x = this.g_tdx + this.g_tsx * x;\n    y = this.g_tdy + this.g_tsy * y;\n\n    // e == ellipse\n    var rx = r * this.g_tsx;\n    var ry = r * this.g_tsy;\n    this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,\n                                x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });\n};\nBWIPJS.prototype.stringwidth = function(str) {\n    var tsx  = this.g_tsx;\n    var tsy  = this.g_tsy;\n    var size = +this.g_font.FontSize || 10;\n\n    // The string can be either a uint8-string or regular string\n    str = this.toUCS2(this.jsstring(str));\n\n    var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);\n\n    return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,\n             a:bbox.ascent/tsy, d:bbox.descent/tsy };\n};\nBWIPJS.prototype.charpath = function(str, b) {\n    var sw = this.stringwidth(str);\n\n    // Emulate the char-path by placing a rectangle around it\n    this.rlineto(0, sw.a);\n    this.rlineto(sw.w, 0);\n    this.rlineto(0, -sw.h);\n};\nBWIPJS.prototype.pathbbox = function() {\n    if (!this.g_path.length)    throw new Error('pathbbox: --nocurrentpoint--');\n    var path = this.g_path;\n    var llx = Infinity;\n    var lly = Infinity;\n    var urx = -Infinity;\n    var ury = -Infinity;\n    for (var i = 0; i < path.length; i++) {\n        var a = path[i];\n        if (a.op == 'c') {\n            continue;\n        }\n        if (a.x0 < a.x1) {\n            if (llx > a.x0) llx = a.x0;\n            if (urx < a.x1) urx = a.x1;\n        } else {\n            if (llx > a.x1) llx = a.x1;\n            if (urx < a.x0) urx = a.x0;\n        }\n        if (a.y0 < a.y1) {\n            if (lly > a.y0) lly = a.y0;\n            if (ury < a.y1) ury = a.y1;\n        } else {\n            if (lly > a.y1) lly = a.y1;\n            if (ury < a.y0) ury = a.y0;\n        }\n    }\n\n    // Convert to user-space coordinates\n    var rv = {  llx:(llx-this.g_tdx)/this.g_tsx,\n                lly:(lly-this.g_tdy)/this.g_tsy,\n                urx:(urx-this.g_tdx)/this.g_tsx,\n                ury:(ury-this.g_tdy)/this.g_tsy };\n    return rv;\n};\n// Tranforms the pts array to standard (not y-inverted), unscalled values.\nBWIPJS.prototype.transform = function(pts) {\n    var minx = this.minx;\n    var maxy = this.maxy;\n\n    for (var i = 0; i < pts.length; i++) {\n        var pt = pts[i];\n        pt[0] = pt[0] - minx;\n        pt[1] = maxy - pt[1];\n    }\n};\nBWIPJS.prototype.stroke = function() {\n    var tsx  = this.g_tsx;\n    var tsy  = this.g_tsy;\n    var path = this.g_path;\n    var rgb  = this.getRGB();\n    this.g_path = [];\n\n    // This is a \"super majority\" round i.e. if over .66 round up.\n    var penw = floor(this.g_penw * tsx + 0.66);\n    var penh = floor(this.g_penw * tsy + 0.66);\n\n    // Calculate the bounding boxes\n    var nlines = 0, npolys = 0;\n    for (var i = 0; i < path.length; i++) {\n        var a = path[i];\n        if (a.op == 'l') {\n            // We only stroke vertical and horizontal lines.  Complex shapes are\n            // always filled.\n            if (a.x0 != a.x1 && a.y0 != a.y1) {\n                throw new Error('stroke: --not-orthogonal--');\n            }\n            var x0 = a.x0;\n            var y0 = a.y0;\n            var x1 = a.x1;\n            var y1 = a.y1;\n\n            // Half widths (may be factional)\n            var penw2 = penw/2;\n            var penh2 = penh/2;\n\n            if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }\n            if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }\n            if (x0 == x1) {\n                this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1);   // vertical line\n            } else {\n                this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);   // horizontal line\n            }\n            nlines++;\n        } else if (a.op == 'p') {\n            // Closed (rectangular) poly (border around the barcode)\n            var minx = Infinity;\n            var miny = Infinity;\n            var maxx = -Infinity;\n            var maxy = -Infinity;\n            var pts  = a.poly;\n            if (pts.length != 4) {\n                throw new Error('stroke: --not-a-rect--');\n            }\n            for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {\n                var xj = pts[j][0];\n                var yj = pts[j][1];\n                var xi = pts[i][0];\n                var yi = pts[i][1];\n\n                if (xi != xj && yi != yj) {\n                    throw new Error('stroke: --not-orthogonal--');\n                }\n\n                if (xi < minx) minx = xi;\n                if (xi > maxx) maxx = xi;\n                if (yi < miny) miny = yi;\n                if (yi > maxy) maxy = yi;\n            }\n\n            // Half widths (integer)\n            var penw2 = ceil(penw/2);\n            var penh2 = ceil(penh/2);\n\n            // We render these as two polygons plus a fill.\n            // When border width is odd, allocate the bigger half to the outside.\n            this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);\n            npolys++;\n        } else {\n            throw new Error('stroke: --not-a-line--');\n        }\n    }\n\n    // Draw the lines\n    var self = this;\n    this.cmds.push(function() {\n        // Half widths (big half and remaining half)\n        var bigw2 = ceil(penw/2);\n        var bigh2 = ceil(penh/2);\n        var remw2 = penw - bigw2;\n        var remh2 = penh - bigh2;\n\n        for (var i = 0; i < path.length; i++) {\n            var a = path[i]\n            if (a.op == 'l') {\n                var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];\n                self.transform(pts);\n                self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],\n                            a.x0 == a.x1 ? penw : penh, rgb);\n                self.fill(rgb);\n            } else {\n                var pts = a.poly;\n                self.transform(pts);\n                var x0 = min(pts[0][0], pts[2][0]);\n                var x1 = max(pts[0][0], pts[2][0]);\n                var y0 = min(pts[0][1], pts[2][1]);\n                var y1 = max(pts[0][1], pts[2][1]);\n\n                // Top and left edges are \"inside\" the polygon.\n                // Bottom and right edges are outside.\n\n                // outside, counter-clockwise\n                self.drawing.polygon([\n                        [ x0-bigw2, y0-bigh2 ],\n                        [ x0-bigw2, y1+bigh2+1 ],\n                        [ x1+bigw2+1, y1+bigh2+1 ],\n                        [ x1+bigw2+1, y0-bigh2 ],\n                    ]);\n                // inside, clockwise\n                self.drawing.polygon([\n                        [ x0+remw2, y0+remh2 ],\n                        [ x1-remw2+1, y0+remh2 ],\n                        [ x1-remw2+1, y1-remh2+1 ],\n                        [ x0+remw2, y1-remh2+1 ],\n                    ]);\n                self.drawing.fill(rgb);\n            }\n        }\n    });\n};\nBWIPJS.prototype.fill = function() {\n    var path = this.g_path;\n    var rgb  = this.getRGB();\n    this.g_path = [];\n\n    // Calculate the bounding boxes\n    for (var p = 0; p < path.length; p++) {\n        var a = path[p];\n        if (a.op == 'p') {  // polygon\n            var minx = Infinity;\n            var miny = Infinity;\n            var maxx = -Infinity;\n            var maxy = -Infinity;\n            var pts  = a.poly;\n            for (var i = 0; i < pts.length; i++) {\n                var xi = pts[i][0];\n                var yi = pts[i][1];\n\n                if (xi < minx) minx = xi;\n                if (xi > maxx) maxx = xi;\n                if (yi < miny) miny = yi;\n                if (yi > maxy) maxy = yi;\n            }\n            // With polygons, the right and bottom edges are \"outside\" and do not\n            // contribute to the bounding box.  But we are in postscript inverted-y\n            // mode.\n            this.bbox(minx, miny+1, maxx-1, maxy);\n        } else if (a.op == 'e') {   // ellipse\n            this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);\n        } else {\n            throw new Error('fill: --not-a-polygon--');\n        }\n    }\n\n    // Render the poly\n    var self = this;\n    this.cmds.push(function() {\n        for (var i = 0; i < path.length; i++) {\n            var a = path[i];\n            if (a.op == 'p') {\n                var pts = a.poly\n                self.transform(pts);\n                self.drawing.polygon(pts);\n            } else if (a.op == 'e') {\n                var pts = [ [ a.x, a.y ] ];\n                self.transform(pts);\n                self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);\n            }\n        }\n        self.drawing.fill(rgb);\n    });\n};\nBWIPJS.prototype.clip = function() {\n    var path = this.g_path;\n    this.g_path = [];\n    this.g_clip = true;\n\n    var self = this;\n    this.cmds.push(function() {\n        var polys = [];\n        for (var i = 0; i < path.length; i++) {\n            var a = path[i];\n            if (a.op == 'p') {\n                var pts = a.poly\n                self.transform(pts);\n                polys.push(pts);\n            } else {\n                throw new Error('clip: only polygon regions supported');\n            }\n        }\n        self.drawing.clip(polys);\n    });\n};\n\n// The pix array is in standard (not y-inverted postscript) orientation.\nBWIPJS.prototype.showmaxicode = function(pix) {\n    var tsx = this.g_tsx;\n    var tsy = this.g_tsy;\n    var rgb = this.getRGB();\n\n    // Module width.  Module height is an integer multiple of tsy.\n    var twidth = 1.04 * tsx * 100;\n    var mwidth = (twidth / 30)|0;\n    if (twidth - (mwidth*30-1) > 9) {\n        mwidth++;\n    }\n\n    // Dimensions needed for plotting the hexagons.  These must be integer values.\n    var w, h, wgap, hgap;\n    // if (opts.??? ) {\n    //  // Create a one or two pixel gap\n    //  wgap = (mwidth & 1) ? 1 : 2;\n    //  hgap = 1;\n    //  w = mwidth - gap;\n    //  h = 4 * tsy;\n    // } else {\n        // Create a 1/8mm gap\n        wgap = (tsx/2)|0;\n        hgap = (tsy/2)|0;\n        w = mwidth - wgap;\n        if (w & 1) {\n            w--;\n        }\n        h = ((4*tsy)|0) - hgap;\n    //}\n\n    // These must be integer values\n    var w2 = w / 2 - 1;         // half width\n    var qh = ((w2+1) / 2)|0;    // quarter height\n    var vh = h - 2 - 2 * qh;    // side height\n\n    // Bounding box\n    this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);\n\n    // Render the elements\n    var self = this;\n    this.cmds.push(function() {\n        // Draw the hexagons\n        for (var i = 0; i < pix.length; i++) {\n            var c = pix[i];\n            var x = c % 30;\n            var y = (c / 30)|0;\n\n            // Adjust x,y to the top of hexagon\n            x *= mwidth;\n            x += (y & 1) ? mwidth : mwidth/2;\n            x = x|0;\n\n            y = 33 - y; // invert for postscript notation\n            y *= tsy * 3;\n            y += tsy * 2 - h/2;\n            y = y|0;\n\n            // Build bottom up so the drawing is top-down.\n            var pts = [ [ x-0.5, y-- ] ];\n            y -= qh-1;\n            pts.push([x-1-w2, y--]);\n            y -= vh;\n            pts.push([x-1-w2, y--]);\n            y -= qh-1;\n            pts.push([x-0.5, y++]);\n            y += qh-1;\n            pts.push([x+w2, y++]);\n            y += vh;\n            pts.push([x+w2, y++]);\n\n            self.transform(pts);\n            self.drawing.hexagon(pts, rgb);\n        }\n        self.drawing.fill(rgb);\n\n\n        // Draw the rings\n        var x = (14 * mwidth + mwidth/2 + 0.01)|0;\n        var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;\n        self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);\n        self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);\n        self.drawing.fill(rgb);\n        self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);\n        self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);\n        self.drawing.fill(rgb);\n        self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);\n        self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);\n        self.drawing.fill(rgb);\n\n    });\n};\n// UTF-8 to UCS-2 (no surrogates)\nBWIPJS.prototype.toUCS2 = function(str) {\n    return str.replace(/[\\xc0-\\xdf][\\x80-\\xbf]|[\\xe0-\\xff][\\x80-\\xbf]{2}/g,\n                      function(s) {\n                          var code;\n                          if (s.length == 2) {\n                              code = ((s.charCodeAt(0)&0x1f)<<6)|\n                                     (s.charCodeAt(1)&0x3f);\n                          } else {\n                              code = ((s.charCodeAt(0)&0x0f)<<12)|\n                                     ((s.charCodeAt(1)&0x3f)<<6)|\n                                     (s.charCodeAt(2)&0x3f);\n                          }\n                          return String.fromCharCode(code);\n                      });\n};\n// dx,dy are inter-character gaps\nBWIPJS.prototype.show = function(str, dx, dy) {\n    if (!str.length) {\n        return;\n    }\n\n    // Capture current graphics state\n    var tsx  = this.g_tsx;\n    var tsy  = this.g_tsy;\n    var name = this.g_font.FontName || 'OCR-B';\n    var size = (this.g_font.FontSize || 10);\n    var szx  = size * tsx;\n    var szy  = size * tsy;\n    var posx = this.g_posx;\n    var posy = this.g_posy;\n    var rgb  = this.getRGB();\n\n    // The string can be either a uint8-string or regular string.\n    str = this.toUCS2(this.jsstring(str));\n\n    // Convert dx,dy to device space\n    dx = tsx * dx || 0;\n    dy = tsy * dy || 0;\n\n    // Bounding box.\n    var base = posy + dy;\n    var bbox = this.drawing.measure(str, name, szx, szy);\n    var width = bbox.width + (str.length-1) * dx;\n    this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);\n    this.g_posx += width;\n\n    var self = this;\n    self.cmds.push(function() {\n        // self.transform()\n        var x = posx - self.minx;\n        var y = self.maxy - posy;\n        self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });\n    });\n};\n// drawing surface bounding box\nBWIPJS.prototype.bbox = function(x0, y0, x1, y1) {\n    if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }\n    if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }\n\n    x0 = floor(x0);\n    y0 = floor(y0);\n    x1 = ceil(x1);\n    y1 = ceil(y1);\n\n    if (this.minx > x0) this.minx = x0;\n    if (this.maxx < x1) this.maxx = x1;\n    if (this.miny > y0) this.miny = y0;\n    if (this.maxy < y1) this.maxy = y1;\n};\nBWIPJS.prototype.render = function() {\n    if (this.minx === Infinity) {\n        // Most likely, `dontdraw` was set in the options\n        return false;\n    }\n    // Draw the image\n    this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,\n                      this.g_tsx, this.g_tsy);\n    for (var i = 0, l = this.cmds.length; i < l; i++) {\n        this.cmds[i]();\n    }\n    return this.drawing.end();\n};\n\nreturn BWIPJS;\n})();   // BWIPJS closure\n// drawing-builtin.js\n//\n// The aliased (except the fonts) graphics used by drawing-canvas.js and\n// drawing-zlibpng.js\n//\n// All x,y and lengths are integer values.\n//\n// For the methods that take a color `rgb` parameter, the value is always a\n// string with format RRGGBB.\nfunction DrawingBuiltin() {\n    var floor = Math.floor;\n\n    // Unrolled x,y rotate/translate matrix\n    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;\n    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;\n\n    var opts;                   // see setopts()\n    var gs_image, gs_rowbyte;   // rowbyte will be 1 for png's, 0 for canvas\n    var gs_width, gs_height;    // image size, in pixels\n    var gs_dx, gs_dy;           // x,y translate (padding)\n    var gs_r, gs_g, gs_b;       // rgb\n    var gs_xymap;               // edge map\n    var gs_xyclip;              // clip region map (similar to xymap)\n\n    return {\n        // setopts() is called after the options are fixed-up/normalized,\n        // but before calling into BWIPP.\n        // This method allows omitting the options in the constructor call.\n        // The method is optional.\n        setopts(options) {\n            opts = options;\n        },\n\n        // Ensure compliant bar codes by always using integer scaling factors.\n        scale : function(sx, sy) {\n            // swissqrcode requires clipping and drawing that are not scaled to the\n            // the barcode module size.\n            if (opts.bcid == 'swissqrcode') {\n                return [ sx, sy ];\n            } else {\n                return [ (sx|0)||1, (sy|0)||1 ];\n            }\n        },\n\n        // Measure text.  This and scale() are the only drawing primitives that\n        // are called before init().\n        //\n        // `font` is the font name typically OCR-A or OCR-B.\n        // `fwidth` and `fheight` are the requested font cell size.  They will\n        // usually be the same, except when the scaling is not symetric.\n        measure : function(str, font, fwidth, fheight) {\n            fwidth = fwidth|0;\n            fheight = fheight|0;\n\n            var fontid = FontLib.lookup(font);\n            var width = 0;\n            var ascent = 0;\n            var descent = 0;\n            for (var i = 0, l = str.length; i < l; i++) {\n                var ch = str.charCodeAt(i);\n                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);\n\n                ascent  = Math.max(ascent, glyph.top);\n                descent = Math.max(descent, glyph.height - glyph.top);\n\n                if (i == l-1) {\n                    width += glyph.left + glyph.width;\n                } else {\n                    width += glyph.advance;\n                }\n            }\n            return { width:width, ascent:ascent, descent:descent };\n        },\n\n        // width and height represent the maximum bounding box the graphics will occupy.\n        // The dimensions are for an unrotated rendering.  Adjust as necessary.\n        init : function(width, height) {\n            // Add in the effects of padding.  These are always set before the\n            // drawing constructor is called.\n            var padl = opts.paddingleft;\n            var padr = opts.paddingright;\n            var padt = opts.paddingtop;\n            var padb = opts.paddingbottom;\n            var rot  = opts.rotate || 'N';\n\n            width  += padl + padr;\n            height += padt + padb;\n\n            if (+opts.sizelimit && +opts.sizelimit < width * height) {\n                throw new Error('Image size over limit');\n            }\n\n            // Transform indexes are: x, y, w, h\n            switch (rot) {\n            // tx = w-y, ty = x\n            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;\n            // tx = w-x, ty = h-y\n            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;\n            // tx = y, ty = h-x\n            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;\n            // tx = x, ty = y\n            default:  tx0 = ty1 = 1; break;\n            }\n\n            // Setup the graphics state\n            var swap = rot == 'L' || rot == 'R';\n            gs_width  = swap ? height : width;\n            gs_height = swap ? width : height;\n            gs_dx = padl;\n            gs_dy = padt;\n            gs_xymap = [];\n            gs_xymap.min = Infinity;\n            gs_xyclip = null;\n            gs_r = gs_g = gs_b = 0;\n\n            // Get the rgba image from the constructor\n            var res = this.image(gs_width, gs_height);\n            gs_image   = res.buffer;\n            gs_rowbyte = res.ispng ? 1 : 0;\n        },\n        // Unconnected stroked lines are used to draw the bars in linear barcodes;\n        // and the border around a linear barcode (e.g. ITF-14)\n        // No line cap should be applied.  These lines are always orthogonal.\n        line : function(x0, y0, x1, y1, lw, rgb) {\n            x0 = x0|0;\n            y0 = y0|0;\n            x1 = x1|0;\n            y1 = y1|0;\n\n            // Most linear barcodes, the line width will be integral.  The exceptions\n            // are variable width barcodes (e.g. code39) and the postal 4-state codes.\n            lw = Math.round(lw) || 1;\n\n            if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }\n            if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }\n\n            gs_r = parseInt(rgb.substr(0,2), 16);\n            gs_g = parseInt(rgb.substr(2,2), 16);\n            gs_b = parseInt(rgb.substr(4,2), 16);\n\n            // Horizontal or vertical line?\n            var w2 = (lw/2)|0;\n            if (x0 == x1) {\n                // Vertical line\n                x0 = x0 - lw + w2;  // big half\n                x1 = x1 + w2 - 1;   // small half\n            } else {\n                // Horizontal line (inverted halves)\n                y0 = y0 - w2;\n                y1 = y1 + lw - w2 - 1;\n            }\n            for (var y = y0; y <= y1; y++) {\n                for (var x = x0; x <= x1; x++) {\n                    set(x, y, 255);\n                }\n            }\n        },\n\n        // Polygons are used to draw the connected regions in a 2d barcode.\n        // These will always be unstroked, filled, orthogonal shapes.\n        //\n        // You will see a series of polygon() calls, followed by a fill().\n        polygon : function(pts) {\n            var npts = pts.length;\n            for (var j = npts-1, i = 0; i < npts; j = i++) {\n                if (pts[j][0] == pts[i][0]) {\n                    // Vertical lines do not get their end points. End points\n                    // are added by the horizontal line logic.\n                    var xj = pts[j][0]|0;   // i or j, doesn't matter\n                    var yj = pts[j][1]|0;\n                    var yi = pts[i][1]|0;\n                    if (yj > yi) {\n                        for (var y = yi+1; y < yj; y++) {\n                            addPoint(xj, y);\n                        }\n                    } else {\n                        for (var y = yj+1; y < yi; y++) {\n                            addPoint(xj, y);\n                        }\n                    }\n                } else {\n                    var xj = pts[j][0]|0;\n                    var xi = pts[i][0]|0;\n                    var yj = pts[j][1]|0;   // i or j, doesn't matter\n\n                    // Horizontal lines are tricky.  As a rule, top lines get filled,\n                    // bottom lines do not (similar to how left edges get filled and\n                    // right edges do not).\n                    //\n                    // Where it gets complex is deciding whether the line actually\n                    // adds edges.  There are cases where a horizontal line does\n                    // not add anything to the scanline plotting.  And it doesn't\n                    // actually matter whether the line is a top or bottom edge,\n                    // the logic is the same.\n                    //\n                    // A left edge is added if the edge to its left is below.\n                    // A right edge is added if the edge to its right is below.\n                    if (xj < xi) {\n                        var yl = pts[j == 0 ? npts-1 : j-1][1]; // left edge\n                        var yr = pts[i == npts-1 ? 0 : i+1][1]; // right edge\n                        if (yl > yj) {\n                            addPoint(xj, yj);\n                        }\n                        if (yr > yj) {\n                            addPoint(xi, yj);\n                        }\n                    } else {\n                        var yl = pts[i == npts-1 ? 0 : i+1][1]; // left edge\n                        var yr = pts[j == 0 ? npts-1 : j-1][1]; // right edge\n                        if (yl > yj) {\n                            addPoint(xi, yj);\n                        }\n                        if (yr > yj) {\n                            addPoint(xj, yj);\n                        }\n                    }\n                }\n            }\n        },\n        // An unstroked, filled hexagon used by maxicode.  You can choose to fill\n        // each individually, or wait for the final fill().\n        //\n        // The hexagon is drawn from the top, counter-clockwise.\n        //\n        // The X-coordinate for the top and bottom points on the hexagon is always\n        // .5 pixels.  We draw our hexagons with a 2 pixel flat top.\n        //\n        // All other points of the polygon/hexagon are guaranteed to be integer values.\n        hexagon : function(pts, rgb) {\n            var x = pts[0][0]|0;\n            var y = pts[0][1]|0;\n            var qh = (pts[1][1] - pts[0][1])|0;     // height of triangle (quarter height)\n            var vh = (pts[2][1] - pts[1][1] - 1)|0; // height of vertical side\n            var xl = (pts[2][0])|0;                 // left side\n            var xr = (pts[4][0])|0;                 // right side\n\n            gs_r = parseInt(rgb.substr(0,2), 16);\n            gs_g = parseInt(rgb.substr(2,2), 16);\n            gs_b = parseInt(rgb.substr(4,2), 16);\n\n            fillSegment(x, x+1, y++);\n            for (var k = 1; k < qh; k++) {\n                fillSegment(x-2*k, x+1+2*k, y++);\n            }\n            for (var k = 0; k <= vh; k++) {\n                fillSegment(xl, xr, y++);\n            }\n            for (var k = qh-1; k >= 1; k--) {\n                fillSegment(x-2*k, x+1+2*k, y++);\n            }\n            fillSegment(x, x+1, y);\n        },\n        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.\n        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()\n        // to create the bullseye rings.  dotcode issues all of its ellipses then a\n        // fill().\n        ellipse : function(x, y, rx, ry, ccw) {\n            drawEllipse((x-rx)|0, (y-ry)|0, (x+rx)|0, (y+ry)|0, ccw);\n        },\n        // PostScript's default fill rule is non-zero but since there are never\n        // intersecting regions, we use the easier to implement even-odd.\n        fill : function(rgb) {\n            gs_r = parseInt(rgb.substr(0,2), 16);\n            gs_g = parseInt(rgb.substr(2,2), 16);\n            gs_b = parseInt(rgb.substr(4,2), 16);\n\n            evenodd();\n            gs_xymap = [];\n            gs_xymap.min = Infinity;\n        },\n        // Currently only used by swissqrcode.  The `polys` area is an array of\n        // arrays of points.  Each array of points is identical to the `pts`\n        // parameter passed to polygon().  The postscript default clipping rule,\n        // like the fill rule, is even-odd winding.\n        clip : function(polys) {\n            if (!gs_xyclip) {\n                gs_xyclip = [];\n                gs_xyclip.min = Infinity;\n            }\n            // Swap out the xymap for the clip map so addPoint() works on it.\n            var xymap = gs_xymap;\n            gs_xymap = gs_xyclip;\n\n            // Now just use the polygon() logic to fill in the clipping regions.\n            for (var i = 0, l = polys.length; i < l; i++) {\n                this.polygon(polys[i]);\n            }\n\n            // Restore\n            gs_xymap = xymap;\n        },\n        unclip : function() {\n            gs_xyclip = null;\n        },\n        // Draw text with optional inter-character spacing.  `y` is the baseline.\n        // font is an object with properties { name, width, height, dx }\n        // width and height are the font cell size.\n        // dx is extra space requested between characters (usually zero).\n        text : function(x, y, str, rgb, font) {\n            x = x|0;\n            y = y|0;\n\n            gs_r = parseInt(rgb.substr(0,2), 16);\n            gs_g = parseInt(rgb.substr(2,2), 16);\n            gs_b = parseInt(rgb.substr(4,2), 16);\n\n            var fontid  = FontLib.lookup(font.name);\n            var fwidth  = font.width|0;\n            var fheight = font.height|0;\n            var dx      = font.dx|0;\n            for (var k = 0; k < str.length; k++) {\n                var ch = str.charCodeAt(k);\n                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);\n\n                var gt = y - glyph.top;\n                var gl = glyph.left;\n                var gw = glyph.width;\n                var gh = glyph.height;\n                var gb = glyph.bytes;\n                var go = glyph.offset;      // offset into bytes\n\n                for (var i = 0; i < gw; i++) {\n                    for (var j = 0; j < gh; j++) {\n                        var a = gb[go + j * gw + i];\n                        if (a) {\n                            set(x+gl+i, gt+j, a);\n                        }\n                    }\n                }\n                x += glyph.advance + dx;\n            }\n        },\n        // Called after all drawing is complete.\n        end : function() {\n        },\n    };\n\n    // This code is specialized to deal with two types of RGBA buffers:\n    // - canvas style, which is true RGBA\n    // - PNG style, which has a one-byte \"filter code\" prefixing each row.\n    function set(x, y, a) {\n        if (gs_xyclip && clipped(x, y)) {\n            return;\n        }\n        // translate/rotate\n        x += gs_dx;\n        y += gs_dy;\n        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);\n        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);\n\n        // https://en.wikipedia.org/wiki/Alpha_compositing\n        var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;\n        var dsta = gs_image[offs+3] / 255;\n        var srca = a / 255;\n        var inva = (1 - srca) * dsta;\n        var outa = srca + inva;\n\n        gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;\n        gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;\n        gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;\n        gs_image[offs+3] = (255 * outa)|0;\n    }\n\n    // Add a point on an edge to the scanline map.\n    function addPoint(x, y) {\n        if (gs_xymap.min > y) gs_xymap.min = y;\n        if (!gs_xymap[y]) {\n            gs_xymap[y] = [ x ];\n        } else {\n            gs_xymap[y].push(x);\n        }\n    }\n\n    function fillSegment(x0, x1, y) {\n        while (x0 <= x1) {\n            set(x0++, y, 255);\n        }\n    }\n\n    // even-odd fill\n    //\n    // This implementation is optimized for BWIPP's simple usage.\n    // It is not a general purpose scanline fill.  It relies heavily on\n    // polygon() creating the correct intersections.\n    function evenodd() {\n        var ymin = gs_xymap.min;\n        var ymax = gs_xymap.length-1;\n\n        for (var y = ymin; y <= ymax; y++) {\n            var pts = gs_xymap[y];\n            if (!pts) {\n                continue\n            }\n            pts.sort(function(a, b) { return a - b; });\n\n            var wn = false;\n            var xl = 0;\n            for (var n = 0, npts = pts.length; n < npts; n++) {\n                var x = pts[n];\n                if (wn) {\n                    fillSegment(xl, x-1, y);\n                } else {\n                    xl = x;\n                }\n                wn = !wn;\n            }\n        }\n    }\n\n    function drawEllipse(x0, y0, x1, y1, dir) {\n        x0 = x0|0;\n        y0 = y0|0;\n        x1 = x1|0;\n        y1 = y1|0;\n\n        var a = Math.abs(x1-x0);\n        var b = Math.abs(y1-y0);\n        var b1 = b & 1;\n        var dx = 4*(1-a)*b*b;\n        var dy = 4*(b1+1)*a*a;\n        var err = dx + dy + b1*a*a;\n        var e2;\n\n        // Left and right edges\n        var left = [], right = [];\n        left.min = right.min = Infinity;\n\n        if (x0 > x1) { x0 = x1; x1 += a; }\n        if (y0 > y1) y0 = y1;\n        y0 += ((b+1)/2)|0;\n        y1 = y0 - b1;\n        a *= 8*a; b1 = 8*b*b;\n\n        do {\n            maxedge(right, x1, y0); // 1st quadrant\n            minedge(left, x0, y0);  // 2nd quadrant\n            minedge(left, x0, y1);  // 3rd quadrant\n            maxedge(right, x1, y1); // 4th quadrant\n            e2 = 2*err;\n            if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }\n            if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }\n        } while (x0 <= x1);\n\n        while (y0-y1 < b) { // too early stop of flat ellipse\n            maxedge(right, x1+1, y0);\n            minedge(left, x0-1, y0++);\n            minedge(left, x0-1, y1);\n            maxedge(right, x1+1, y1--);\n        }\n\n        for (var y = left.min, max = left.length-1; y <= max; y++) {\n            addPoint(left[y], y);\n        }\n        // The points we calculated are \"inside\".  The fill algorithm excludes\n        // right edges, so +1 on each x.\n        for (var y = right.min, max = right.length-1; y <= max; y++) {\n            addPoint(right[y]+1, y);\n        }\n\n        function minedge(e, x, y) {\n            if (e.min > y) e.min = y;\n            var ey = e[y];\n            if (ey == null || ey > x) {\n                e[y] = x;\n            }\n        }\n\n        function maxedge(e, x, y) {\n            if (e.min > y) e.min = y;\n            var ey = e[y];\n            if (ey == null || ey < x) {\n                e[y] = x;\n            }\n        }\n    }\n\n    // Returns true if outside the clipping region.\n    function clipped(x, y) {\n        var pts = gs_xyclip[y];\n        if (!pts) {\n            return true;\n        }\n        if (!pts.sorted) {\n            pts.sort(function(a, b) { return a - b; });\n            pts.sorted = true;\n        }\n\n        var wn = false;\n        for (var n = 0, npts = pts.length; n < npts; n++) {\n            var xn = pts[n];\n            if (xn > x) {\n                return !wn;\n            } else if (xn == x) {\n                return wn;\n            }\n            wn = !wn;\n        }\n        return true;\n    }\n\n    // Returns 1 if clockwise, -1 if ccw.\n    function polydir(pts) {\n        var xp = 0;\n        for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {\n            xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];\n        }\n        return xp > 0 ? 1 : -1;\n    }\n}\n// drawing-zlibpng.js\n//\nvar PNGTYPE_PALETTE = 3;\nvar PNGTYPE_TRUEALPHA = 6;\nvar PNG_TEXT = \"Software\\0bwip-js.metafloor.com\";\nvar PNG_CRC = (function() {\n    var precalc = [];\n    for (var i = 0; i < 256; i++) {\n        var c = i;\n        for (var j = 0; j < 8; j++) {\n            if (c & 1) {\n                c = 0xedb88320 ^ (c >>> 1);\n            } else {\n                c = c >>> 1;\n            }\n        }\n        precalc[i] = c;\n    }\n    return precalc;\n})();\n\n// This has been moved to the nodejs-only section of exports.js due to\n// react-native polyfills.\n//import PNG_ZLIB from 'zlib';\n\n// `maybe` maybe the callback, pre v4.0.\nfunction DrawingZlibPng(callback, maybe) {\n    // Pre setops() backward compatibility.\n    if (maybe && typeof maybe == 'function') {\n        callback = maybe;\n    }\n    var image_buffer, image_width, image_height;\n\n    // Provide our specializations for the builtin drawing\n    var drawing = DrawingBuiltin();\n    drawing.image = image;\n    drawing.end = end;\n\n    // Reflect setopts() into the super\n    var opts;\n    var _setopts = drawing.setopts;\n    drawing.setopts = function (options) {\n        opts = options;\n        _setopts && _setopts.call(drawing, options);\n    };\n\n    return drawing;\n\n    // Called by DrawingBuiltin.init() to get the RGBA image data for rendering.\n    function image(width, height) {\n        // PNG RGBA buffers are prefixed with a one-byte filter type\n        image_buffer = Buffer.alloc ? Buffer.alloc(width * height * 4 + height)\n                                    : new Buffer(width * height * 4 + height);\n        image_width = width;\n        image_height = height;\n\n        // Set background\n        if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {\n            var rgb = opts.backgroundcolor;\n            fillRGB(parseInt(rgb.substr(0,2), 16),\n                    parseInt(rgb.substr(2,2), 16),\n                    parseInt(rgb.substr(4,2), 16));\n        }\n\n        // The return value is designed to accommodate both canvas pure-RGBA buffers\n        // and PNG's row-filter prefixed RGBA buffers.\n        return { buffer:image_buffer, ispng:true };\n    }\n\n    function fillRGB(r, g, b) {\n        var color = ((r << 24) | (g << 16) | (b << 8) | 0xff) >>> 0;\n\n        // This is made complex by the filter byte that prefixes each row...\n        var len = image_width * 4 + 1;\n        var row = Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);\n        for (var i = 1; i < len; i += 4) {\n            row.writeUInt32BE(color, i);\n        }\n        image_buffer.fill(row);\n    }\n\n    function end() {\n        if (!callback) {\n            return new Promise(makePNG);\n        } else {\n            makePNG(function(png) { callback(null, png); }, function(err) { callback(err); });\n        }\n    }\n\n    function makePNG(resolve, reject) {\n        // DEFLATE the image data\n        var bufs = [];\n        var buflen = 0;\n        var deflator = PNG_ZLIB.createDeflate({\n                chunkSize: 32 * 1024,\n                level : PNG_ZLIB.Z_DEFAULT_COMPRESSION,\n                strategy: PNG_ZLIB.Z_DEFAULT_STRATEGY });\n        deflator.on('error', reject);\n        deflator.on('data', function(data) { bufs.push(data); buflen += data.length; });\n        deflator.on('end', returnPNG);\n        deflator.end(image_buffer);\n\n        function returnPNG() {\n            var length = 8 + 12 + 13 +          // PNG Header + IHDR chunk\n                         12 + PNG_TEXT.length + // tEXt\n                         12 + buflen +          // IDAT\n                         12;                    // IEND\n            if (opts.dpi) {\n                length += 12 + 9;               // pHYs\n            }\n\n            // Emulate a byte-stream\n            var png = Buffer.alloc(length);\n            var pngoff = 0; // running offset into the png buffer\n\n            write('\\x89PNG\\x0d\\x0a\\x1a\\x0a'); // PNG file header\n            writeIHDR();\n            writeTEXT();\n            if (opts.dpi) {\n                writePHYS();\n            }\n            writeIDAT();\n            writeIEND();\n\n            // Success\n            resolve(png);\n\n            function writeIHDR() {\n                write32(13);    // chunk length\n                var crcoff = pngoff;\n\n                write('IHDR');\n                write32(image_width);\n                write32(image_height);\n                write8(8);      // bit depth\n                write8(PNGTYPE_TRUEALPHA);\n                write8(0);      // compression default\n                write8(0);      // filter default\n                write8(0);      // no interlace\n\n                writeCRC(crcoff);\n            }\n            function writeTEXT() {\n                write32(PNG_TEXT.length);   // chunk length\n                var crcoff = pngoff;\n\n                write('tEXt');\n                write(PNG_TEXT);\n                writeCRC(crcoff);\n            }\n            function writePHYS() {\n                write32(9);\n                var crcoff = pngoff;\n\n                var pxm = ((opts.dpi || 72) / 0.0254)|0;\n                write('pHYs');\n                write32(pxm);   // x-axis\n                write32(pxm);   // y-axis\n                write8(1);      // px/m (the only usable option)\n                writeCRC(crcoff);\n            }\n            function writeIDAT() {\n                write32(buflen);    // chunk length\n                var crcoff = pngoff;\n\n                write('IDAT');\n                for (var i = 0; i < bufs.length; i++) {\n                    bufs[i].copy(png, pngoff);\n                    pngoff += bufs[i].length;\n                }\n                writeCRC(crcoff);\n            }\n            function writeIEND() {\n                write32(0);             // chunk length;\n                var crcoff = pngoff;\n\n                write('IEND');\n                writeCRC(crcoff);\n            }\n\n            function write(s) {\n                png.write(s, pngoff, 'binary');\n                pngoff += s.length;\n            }\n            function write32(v) {\n                png.writeUInt32BE(v, pngoff);\n                pngoff += 4;\n            }\n            function write16(v) {\n                png.writeUInt16BE(v, pngoff);\n                pngoff += 2;\n            }\n            function write8(v) {\n                png[pngoff++] = v;\n            }\n            function writeCRC(off) {\n                var crc = -1;\n                while (off < pngoff) {\n                    crc = PNG_CRC[(crc ^ png[off++]) & 0xff] ^ (crc >>> 8);\n                }\n                write32((crc ^ -1) >>> 0);\n            }\n        }\n    }\n}\n// drawing-svg.js\n//\n// Converts the drawing primitives into the equivalent SVG.  Linear barcodes\n// are rendered as a series of stroked paths.  2D barcodes are rendered as a \n// series of filled paths.\n//\n// Rotation is handled during drawing.  The resulting SVG will contain the \n// already-rotated barcode without an SVG transform.\n//\n// If the requested barcode image contains text, the glyph paths are \n// extracted from the font file (via the builtin FontLib and stb_truetype.js)\n// and added as filled SVG paths.\n//\nfunction DrawingSVG() {\n    // Unrolled x,y rotate/translate matrix\n    var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;\n    var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;\n\n    var opts;\n    var svg = '';\n    var path;\n    var clipid = '';\n    var clips = [];\n    var lines = {};\n\n    // We adjust the drawing coordinates by 0.5px when stroke width is odd.\n    // But this creates an odd effect with scale.  When scale is even, we\n    // need to add 0.5; when scale is odd, subtract 0.5.\n    var scalex, scaley;\n\n    // Magic number to approximate an ellipse/circle using 4 cubic beziers.\n    var ELLIPSE_MAGIC = 0.55228475 - 0.00045;\n\n    // Global graphics state\n    var gs_width, gs_height;    // image size, in pixels\n    var gs_dx, gs_dy;           // x,y translate (padding)\n\n    return {\n        // setopts() is called after the options are fixed-up/normalized,\n        // but before calling into BWIPP.\n        // This allows omitting the options in the constructor call.\n        // It is also your last chance to amend the options before usage.\n        setopts(options) {\n            opts = options;\n        },\n\n        // measure() and scale() are the only drawing primitives that are called before init().\n\n        // Make no adjustments\n        scale(sx, sy) {\n            scalex = sx;\n            scaley = sy;\n        },\n        // Measure text.\n        // `font` is the font name typically OCR-A or OCR-B.\n        // `fwidth` and `fheight` are the requested font cell size.  They will\n        // usually be the same, except when the scaling is not symetric.\n        measure(str, font, fwidth, fheight) {\n            fwidth = fwidth|0;\n            fheight = fheight|0;\n\n            var fontid = FontLib.lookup(font);\n            var width = 0;\n            var ascent = 0;\n            var descent = 0;\n            for (var i = 0, l = str.length; i < l; i++) {\n                var ch = str.charCodeAt(i);\n                var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);\n                if (!glyph) {\n                    continue;\n                }\n                ascent  = Math.max(ascent, glyph.top);\n                descent = Math.max(descent, glyph.height - glyph.top);\n                if (i == l-1) {\n                    width += glyph.left + glyph.width;\n                } else {\n                    width += glyph.advance;\n                }\n            }\n            return { width, ascent, descent };\n        },\n\n        // `width` and `height` represent the maximum bounding box the graphics will\n        // occupy.  The dimensions are for an unrotated rendering.  Adjust as necessary.\n        init(width, height) {\n            // Add in the effects of padding.  These are always set before the\n            // drawing constructor is called.\n            var padl = opts.paddingleft;\n            var padr = opts.paddingright;\n            var padt = opts.paddingtop;\n            var padb = opts.paddingbottom;\n            var rot  = opts.rotate || 'N';\n\n            width  += padl + padr;\n            height += padt + padb;\n\n            // Transform indexes are: x, y, w, h\n            switch (rot) {\n            // tx = w-y, ty = x\n            case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;\n            // tx = w-x, ty = h-y\n            case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;\n            // tx = y, ty = h-x\n            case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;\n            // tx = x, ty = y\n            default:  tx0 = ty1 = 1; break;\n            }\n\n            // Setup the graphics state\n            var swap = rot == 'L' || rot == 'R';\n            gs_width  = swap ? height : width;\n            gs_height = swap ? width : height;\n            gs_dx = padl;\n            gs_dy = padt;\n        },\n        // Unconnected stroked lines are used to draw the bars in linear barcodes.\n        // No line cap should be applied.  These lines are always orthogonal.\n        line(x0, y0, x1, y1, lw, rgb) {\n            x0 = x0|0;\n            y0 = y0|0;\n            x1 = x1|0;\n            y1 = y1|0;\n            lw = Math.round(lw) || 1;\n\n            // Try to keep the lines \"crisp\" by using with the SVG line drawing spec to\n            // our advantage and adjust the coordinates by half pixel when stroke width\n            // is odd.  Work around an odd effect with scale.  When scale is even, we\n            // need to add 0.5; when scale is odd, subtract 0.5.\n            if (lw & 1) {\n                if (x0 == x1) {\n                    let dx = (scalex&1) ? -0.5 : 0.5;\n                    x0 += dx;\n                    x1 += dx;\n                }\n                if (y0 == y1) {\n                    let dy = (scaley&1) ? -0.5 : 0.5;\n                    y0 += dy;\n                    y1 += dy;\n                }\n            }\n            // The svg path does not include the start pixel, but the built-in drawing does.\n            if (x0 == x1) {\n                y0++;\n            } else if (y0 == y1) {\n                x0++;\n            }\n\n            // Group together all lines of the same width and emit as single paths.\n            // Dramatically reduces the svg text size.\n            var key = '' + lw + '#' + rgb;\n            if (!lines[key]) {\n                lines[key] = '<path stroke=\"#' + rgb + '\" stroke-width=\"' + lw + '\" d=\"';\n            }\n            lines[key] += 'M' + transform(x0, y0) + 'L' + transform(x1, y1);\n        },\n        // Polygons are used to draw the connected regions in a 2d barcode.\n        // These will always be unstroked, filled, non-intersecting,\n        // orthogonal shapes.\n        // You will see a series of polygon() calls, followed by a fill().\n        polygon(pts) {\n            if (!path) {\n                path = '<path d=\"';\n            }\n            path += 'M' + transform(pts[0][0], pts[0][1]);\n            for (var i = 1, n = pts.length; i < n; i++) {\n                var p = pts[i];\n                path += 'L' + transform(p[0], p[1]);\n            }\n            path += 'Z';\n        },\n        // An unstroked, filled hexagon used by maxicode.  You can choose to fill\n        // each individually, or wait for the final fill().\n        //\n        // The hexagon is drawn from the top, counter-clockwise.\n        hexagon(pts, rgb) {\n            this.polygon(pts); // A hexagon is just a polygon...\n        },\n        // An unstroked, filled ellipse.  Used by dotcode and maxicode at present.\n        // maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()\n        // to create the bullseye rings.  dotcode issues all of its ellipses then a\n        // fill().\n        ellipse(x, y, rx, ry, ccw) {\n            if (!path) {\n                path = '<path d=\"';\n            }\n            var dx = rx * ELLIPSE_MAGIC;\n            var dy = ry * ELLIPSE_MAGIC;\n\n            // Since there are never overlapping regions, we don't worry about cw/ccw.\n            path += 'M' + transform(x - rx, y) +\n                    'C' + transform(x - rx, y - dy) + ' ' +\n                          transform(x - dx, y - ry) + ' ' +\n                          transform(x,      y - ry) +\n                    'C' + transform(x + dx, y - ry) + ' ' +\n                          transform(x + rx, y - dy) + ' ' +\n                          transform(x + rx, y) + \n                    'C' + transform(x + rx, y + dy) + ' ' +\n                          transform(x + dx, y + ry) + ' ' +\n                          transform(x,      y + ry) +  \n                    'C' + transform(x - dx, y + ry) + ' ' +\n                          transform(x - rx, y + dy) + ' ' +\n                          transform(x - rx, y) + \n                    'Z';\n        },\n        // PostScript's default fill rule is non-zero but there are never intersecting\n        // regions. The built-in drawing uses even-odd for simplicity - we match that\n        // to be consistent.\n        fill(rgb) {\n            if (path) {\n                svg += path + '\" fill=\"#' + rgb + '\" fill-rule=\"evenodd\"' +\n                       (clipid ? ' clip-path=\"url(#' + clipid + ')\"' : '') +\n                       ' />\\n';\n                path = null;\n            }\n        },\n        // Currently only used by swissqrcode.  The `polys` area is an array of\n        // arrays of points.  Each array of points is identical to the `pts`\n        // parameter passed to polygon().  The clipping rule, like the fill rule,\n        // defaults to non-zero winding.\n        clip : function(polys) {\n            var path = '<clipPath id=\"clip' + clips.length + '\"><path d=\"';\n            for (let j = 0; j < polys.length; j++) {\n                let pts = polys[j];\n                path += 'M' + transform(pts[0][0], pts[0][1]);\n                for (var i = 1, n = pts.length; i < n; i++) {\n                    var p = pts[i];\n                    path += 'L' + transform(p[0], p[1]);\n                }\n                path += 'Z';\n            }\n            path += '\" clip-rule=\"nonzero\" /></clipPath>';\n            clipid = \"clip\" + clips.length;\n            clips.push(path);\n        },\n        unclip : function() {\n            clipid = '';\n        },\n        // Draw text with optional inter-character spacing.  `y` is the baseline.\n        // font is an object with properties { name, width, height, dx }\n        // width and height are the font cell size.\n        // dx is extra space requested between characters (usually zero).\n        text(x, y, str, rgb, font) {\n            var fontid  = FontLib.lookup(font.name);\n            var fwidth  = font.width|0;\n            var fheight = font.height|0;\n            var dx      = font.dx|0;\n            var path = '';\n            for (var k = 0; k < str.length; k++) {\n                var ch = str.charCodeAt(k);\n                var glyph = FontLib.getpaths(fontid, ch, fwidth, fheight);\n                if (!glyph) {\n                    continue;\n                }\n                if (glyph.length) {\n                    // A glyph is composed of sequence of curve and line segments.\n                    // M is move-to\n                    // L is line-to\n                    // Q is quadratic bezier curve-to\n                    // C is cubic bezier curve-to\n                    for (var i = 0, l = glyph.length; i < l; i++) {\n                        let seg = glyph[i];\n                        if (seg.type == 'M' || seg.type == 'L') {\n                            path += seg.type + transform(seg.x + x, y - seg.y);\n                        } else if (seg.type == 'Q') {\n                            path += seg.type + transform(seg.cx + x, y - seg.cy) + ' ' +\n                                               transform(seg.x + x,  y - seg.y);\n                        } else if (seg.type == 'C') {\n                            path += seg.type + transform(seg.cx1 + x, y - seg.cy1) + ' ' +\n                                               transform(seg.cx2 + x, y - seg.cy2) + ' ' +\n                                               transform(seg.x + x,   y - seg.y);\n                        }\n                    }\n                    // Close the shape\n                    path += 'Z';\n                }\n                // getglyph() provides slightly different metrics than getpaths().  Keep\n                // it consistent with the built-in drawing.\n                x += FontLib.getglyph(fontid, ch, fwidth, fheight).advance + dx;\n            }\n            if (path) {\n                svg += '<path d=\"' + path + '\" fill=\"#' + rgb + '\" />\\n';\n            }\n        },\n        // Called after all drawing is complete.  The return value from this method\n        // will be the return value from `bwipjs.render()`.\n        end() {\n            var linesvg = '';\n            for (var key in lines) {\n                linesvg += lines[key] + '\" />\\n';\n            }\n            var bg = opts.backgroundcolor;\n            return '<svg viewBox=\"0 0 ' + gs_width + ' ' + gs_height + '\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n                        (clips.length ? '<defs>' + clips.join('') + '</defs>' : '') +\n                        (/^[0-9A-Fa-f]{6}$/.test(''+bg)\n                            ? '<rect width=\"100%\" height=\"100%\" fill=\"#' + bg + '\" />\\n'\n                            : '') +\n                        linesvg + svg + '</svg>\\n';\n        },\n    };\n\n    // translate/rotate and return as an SVG coordinate pair\n    function transform(x, y) {\n        x += gs_dx;\n        y += gs_dy;\n        var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);\n        var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);\n        return '' + ((tx|0) == tx ? tx : tx.toFixed(2)) + ' ' +\n                    ((ty|0) == ty ? ty : ty.toFixed(2));\n    }\n}\n// fontlib.js\nvar FontLib = (function() {\n    var fonts = [];\n    var names = {};\n    var glyphcache = {};\n    var glyphmru = {};\n    var glyphcount = 0;\n\n    // Sentinel to simplify moving entries around in the list.\n    glyphmru.next = glyphmru;\n    glyphmru.prev = glyphmru;\n\n    return {\n        lookup:lookup,\n        monochrome:monochrome,\n        getglyph:getglyph,\n        getpaths:getpaths,\n        loadFont:loadFont,\n    };\n\n    // loadFont(name, data)\n    // loadFont(name, mult, data)\n    // loadFont(name, multy, multx, data)   // note order: y,x\n    // data must be the font data, either a binary or base64 encoded string.\n    function loadFont(name /*...args*/) {\n        var multx = 100;\n        var multy = 100;\n        var data = null;\n\n        if (arguments.length == 2) {\n            data = arguments[1];\n        } else if (arguments.length == 3) {\n            multx = multy = +arguments[1] || 100;\n            data = arguments[2];\n        } else if (arguments.length == 4) {\n            multy = +arguments[1] || 100;\n            multx = +arguments[2] || 100;\n            data = arguments[3];\n        } else {\n            throw new Error(\"bwipjs: loadFont: invalid number of arguments\");\n        }\n\n        var font = STBTT.InitFont(toUint8Array(data));\n        font.bwipjs_name = name;\n        font.bwipjs_multx = multx;\n        font.bwipjs_multy = multy;\n\n        var fontid = fonts.push(font)-1;\n        names[name.toUpperCase()] = fontid;\n        return fontid;\n    }\n\n    // Always returns a valid font-id (default OCR-B)\n    function lookup(name) {\n        var fontid = names[name.toUpperCase()];\n        return fontid === undefined ? 1 : fontid;       // OCR B default\n    }\n\n    // Not supported by stbtt\n    function monochrome(mono) {\n        if (mono) {\n            throw new Error('bwipjs: monochrome fonts not implemented');\n        }\n    }\n\n    function getglyph(fontid, charcode, width, height) {\n        fontid   = fontid|0;\n        charcode = charcode|0;\n        width    = +width;\n        height   = +height;\n        if (!width || width < 8) {\n            width = 8;\n        }\n        if (!height || height < 8) {\n            height = width;\n        }\n        if (fontid < 0 || fontid >= fonts.length) {\n            fontid = 1;     // OCR B default\n        }\n        if (!charcode || charcode < 32) {\n            charcode = 32;\n        }\n\n        // In the cache?\n        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height;\n        var glyph = glyphcache[cachekey];\n        if (glyph) {\n            // Unthread from the MRU\n            glyph.prev.next = glyph.next;\n            glyph.next.prev = glyph.prev;\n\n            // Thread back onto the top\n            var sntl = glyphmru;\n            sntl.next.prev = glyph;\n            glyph.next = sntl.next;\n            glyph.prev = sntl;\n            sntl.next = glyph;\n\n            return glyph;\n        }\n\n        var font = fonts[fontid];\n        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,\n                                                   height * font.bwipjs_multy / 100) ||\n                    STBTT.GetGlyph(font, 0, width * font.bwipjs_multx / 100,\n                                                   height * font.bwipjs_multy / 100);\n\n        glyph.bytes = glyph.pixels;\n        glyph.cachekey = cachekey;\n        glyph.offset = 0;\n\n        //glyph = {\n        //      top:font.GlyphTop(),\n        //      left:font.GlyphLeft(),\n        //      width:font.GlyphWidth(),\n        //      height:font.GlyphHeight(),\n        //      advance:font.GlyphAdvance(),\n        //      bitmap:font.GlyphBitmap(),\n        //      offset:0,\n        //      cachekey:cachekey,\n        //  };\n\n        // Purge old\n        if (glyphcount > 250) {\n            var sntl = glyphmru;\n            var temp = sntl.prev;\n            temp.prev.next = sntl;\n            sntl.prev = temp.prev;\n            temp.next = temp.prev = null;\n            delete glyphcache[temp.cachekey];\n        } else {\n            glyphcount++;\n        }\n\n        // Add to cache and to the top of the MRU\n        glyphcache[cachekey] = glyph;\n\n        var sntl = glyphmru;\n        sntl.next.prev = glyph;\n        glyph.next = sntl.next;\n        glyph.prev = sntl;\n        sntl.next = glyph;\n\n        return glyph;\n    }\n\n    function getpaths(fontid, charcode, width, height) {\n        fontid   = fontid|0;\n        charcode = charcode|0;\n        width    = +width;\n        height   = +height;\n        if (!width || width < 8) {\n            width = 8;\n        }\n        if (!height || height < 8) {\n            height = width;\n        }\n        if (fontid < 0 || fontid >= fonts.length) {\n            fontid = 1;     // OCR B default\n        }\n        if (!charcode || charcode < 32) {\n            charcode = 32;\n        }\n\n        var font = fonts[fontid];\n        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,\n                                              height * font.bwipjs_multy / 100);\n    }\n})();\n\n// This is needed to make the default exports traceable by esbuild\n// during its tree shaking phase.  See issue #298.\nfunction LoadFont() {\n    return FontLib.loadFont.apply(FontLib, Array.prototype.slice.call(arguments));\n}\n// bwip-js/stb_trutype.js\n//\n// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.\n//\n// This file is part of the bwip-js project available at:\n//\n//      http://metafloor.github.io/bwip-js\n//\n// Copyright (c) 2019 Mark Warren : MIT LICENSE\n\n// Copyright notice from stb_truetype.h:\n//\n// MIT License\n//\n// Copyright (c) 2017 Sean Barrett\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n// of the Software, and to permit persons to whom the Software is furnished to do\n// so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar STBTT = (function () {\n\nvar STBTT_vmove  = 1,\n    STBTT_vline  = 2,\n    STBTT_vcurve = 3,\n    STBTT_vcubic = 4,\n\n    STBTT_PLATFORM_ID_UNICODE   = 0,\n    STBTT_PLATFORM_ID_MAC       = 1,\n    STBTT_PLATFORM_ID_ISO       = 2,\n    STBTT_PLATFORM_ID_MICROSOFT = 3,\n\n    STBTT_UNICODE_EID_UNICODE_1_0       = 0,\n    STBTT_UNICODE_EID_UNICODE_1_1       = 1,\n    STBTT_UNICODE_EID_ISO_10646         = 2,\n    STBTT_UNICODE_EID_UNICODE_2_0_BMP   = 3,\n    STBTT_UNICODE_EID_UNICODE_2_0_FULL  = 4,\n\n    STBTT_MS_EID_SYMBOL         = 0,\n    STBTT_MS_EID_UNICODE_BMP    = 1,\n    STBTT_MS_EID_SHIFTJIS       = 2,\n    STBTT_MS_EID_UNICODE_FULL   = 10;\n\nvar floor = Math.floor;\nvar ceil  = Math.ceil;\nvar sqrt  = Math.sqrt;\nvar abs   = Math.abs;\n\n// Allocate an array of objects - replaces malloc(sizeof struct * n)\nfunction oalloc(n) {\n    var o = [];\n    for (var i = 0; i < n; i++) {\n        o.push({});\n    }\n    return o;\n}\n\n//static unsigned char stbtt__buf_get8(stbtt__buf * b)\nfunction stbtt__buf_get8(b) {\n    return b[b.cursor++]||0;\n}\n\n//static unsigned char stbtt__buf_peek8(stbtt__buf * b)\nfunction stbtt__buf_peek8(b) {\n    return b[b.cursor];\n}\n\n//static void stbtt__buf_seek(stbtt__buf * b, int o)\nfunction stbtt__buf_seek(b, o) {\n    b.cursor = (o > b.length || o < 0) ? b.length : o;\n}\n\n//static void stbtt__buf_skip(stbtt__buf * b, int o)\nfunction stbtt__buf_skip(b, o) {\n    stbtt__buf_seek(b, b.cursor + o);\n}\n\n//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)\nfunction stbtt__buf_get(b, n) {\n    var v = 0;\n    for (var i = 0; i < n; i++) {\n        v = (v << 8) | stbtt__buf_get8(b);\n    }\n    return v;\n}\n\n// This function is only called once with a real 'p', all other uses are\n// for a NULL buffer.  The for real usage, the code is inlined.\n//static stbtt__buf stbtt__new_buf(const void *p, int size)\nfunction stbtt__null_buf() {\n    return { length:0 };\n}\n\n//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)\nfunction stbtt__buf_range(b, o, s) {\n    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {\n        return stbtt__null_buf();\n    }\n    var r = b.subarray(o, o + s);\n    r.cursor = 0;\n    return r;\n}\n\n//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)\nfunction stbtt__cff_get_index(b) {\n    var start = b.cursor;\n    var count = stbtt__buf_get(b, 2);\n    if (count) {\n        var offsize = stbtt__buf_get8(b);\n        stbtt__buf_skip(b, offsize * count);\n        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);\n    }\n    return stbtt__buf_range(b, start, b.cursor - start);\n}\n\n//static unsigned int stbtt__cff_int(stbtt__buf * b)\nfunction stbtt__cff_int(b) {\n    var b0 = stbtt__buf_get8(b);\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    } else if (b0 >= 247 && b0 <= 250) {\n        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;\n    } else if (b0 >= 251 && b0 <= 254) {\n        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;\n    } else if (b0 == 28) {\n        return stbtt__buf_get(b, 2);\n    } else if (b0 == 29) {\n        return stbtt__buf_get(b, 4);\n    }\n    return 0;\n}\n\n//static void stbtt__cff_skip_operand(stbtt__buf * b)\nfunction stbtt__cff_skip_operand(b) {\n    var b0 = stbtt__buf_peek8(b);\n    if (b0 == 30) {\n        stbtt__buf_skip(b, 1);\n        while (b.cursor < b.length) {\n            var v = stbtt__buf_get8(b);\n            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {\n                break;\n            }\n        }\n    } else {\n        stbtt__cff_int(b);\n    }\n}\n\n//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)\nfunction stbtt__dict_get(b, key) {\n    stbtt__buf_seek(b, 0);\n    while (b.cursor < b.length) {\n        var start = b.cursor, end, op;\n        while (stbtt__buf_peek8(b) >= 28) {\n            stbtt__cff_skip_operand(b);\n        }\n        end = b.cursor;\n        op = stbtt__buf_get8(b);\n        if (op == 12) {\n            op = stbtt__buf_get8(b) | 0x100;\n        }\n        if (op == key) {\n            return stbtt__buf_range(b, start, end - start);\n        }\n    }\n    return stbtt__buf_range(b, 0, 0);\n}\n\n//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)\nfunction stbtt__dict_get_ints(b, key, outcount, out) {\n    var operands = stbtt__dict_get(b, key);\n    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {\n        out[i] = stbtt__cff_int(operands);\n    }\n}\n// single-integer format of above since javascript doesn't have address-of\nfunction stbtt__dict_get_int(b, key, out) {\n    var operands = stbtt__dict_get(b, key);\n    if (operands.cursor < operands.length) {\n        out = stbtt__cff_int(operands);\n    }\n    return out;\n}\n\n//static int stbtt__cff_index_count(stbtt__buf * b)\nfunction stbtt__cff_index_count(b) {\n    stbtt__buf_seek(b, 0);\n    return stbtt__buf_get(b, 2);\n}\n\n//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)\nfunction stbtt__cff_index_get(b, i) {\n    var count, offsize, start, end;\n    stbtt__buf_seek(b, 0);\n    count = stbtt__buf_get(b, 2);\n    offsize = stbtt__buf_get8(b);\n    stbtt__buf_skip(b, i * offsize);\n    start = stbtt__buf_get(b, offsize);\n    end = stbtt__buf_get(b, offsize);\n    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);\n}\n\n// Convert sign-extend a 16-bit integer to JS number\nfunction INT16(n) {\n    return n & 0x8000 ? (0xffff0000|n)>>0 : n;\n}\n\n//static unsigned short ttUSHORT(unsigned char *p)\nfunction ttUSHORT(b, o) {\n    return b[o] * 256 + b[o+1];\n}\n\n//static short ttSHORT(unsigned char *p)\nfunction ttSHORT(b, o) {\n    var n = b[o] * 256 + b[o+1];\n    return n & 0x8000 ? (0xffff0000|n)>>0 : n;\n}\n\n//static unsigned int ttULONG(unsigned char *p)\nfunction ttULONG(b, o) {\n    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];\n}\n\n//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)\nfunction stbtt__find_table(data, fontstart, tag) {\n    var num_tables = ttUSHORT(data, fontstart + 4);\n    var tabledir = fontstart + 12;\n    for (var i = 0; i < num_tables; ++i) {\n        var loc = tabledir + 16 * i;\n        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {\n            return ttULONG(data, loc + 8);\n        }\n    }\n    return 0;\n}\n\n//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)\nfunction stbtt__get_subrs(cff, fontdict) {\n    var private_loc = [ 0, 0 ];\n    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);\n    if (!private_loc[1] || !private_loc[0]) {\n        return stbtt__null_buf();\n    }\n    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);\n    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);\n    if (!subrsoff) {\n        return stbtt__null_buf();\n    }\n    stbtt__buf_seek(cff, private_loc[1] + subrsoff);\n    return stbtt__cff_get_index(cff);\n}\n\n//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)\nfunction stbtt_InitFont_internal(info, data, fontstart) {\n    var cmap, t, i, numTables;\n\n    info.data = data;\n    info.fontstart = fontstart;\n    info.cff = stbtt__null_buf();\n\n    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);        //\"cmap\"\n    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);   //\"loca\"\n    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);  //\"head\"\n    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]); //\"glyf\"\n    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);  //\"hhea\"\n    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]); //\"hmtx\"\n    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]); //\"kern\"\n\n    if (!cmap || !info.head || !info.hhea || !info.hmtx) {\n        return 0;\n    }\n    if (info.glyf) {\n        if (!info.loca) {\n            return 0;\n        }\n    } else {\n        var b, topdict, topdictidx, cff,\n            cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;\n\n        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);   //\"CFF \"\n        if (!cff) {\n            return 0;\n        }\n\n        info.fontdicts = stbtt__null_buf();\n        info.fdselect = stbtt__null_buf();\n\n        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);\n        info.cff.cursor = 0;\n        b = info.cff;\n\n        stbtt__buf_skip(b, 2);\n        stbtt__buf_seek(b, stbtt__buf_get8(b));\n\n        stbtt__cff_get_index(b);\n        topdictidx = stbtt__cff_get_index(b);\n        topdict = stbtt__cff_index_get(topdictidx, 0);\n        stbtt__cff_get_index(b);\n        info.gsubrs = stbtt__cff_get_index(b);\n\n        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);\n        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);\n        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);\n        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);\n        info.subrs = stbtt__get_subrs(b, topdict);\n\n        if (cstype != 2) {\n            return 0;\n        }\n        if (charstrings == 0) {\n            return 0;\n        }\n\n        if (fdarrayoff) {\n            if (!fdselectoff) {\n                return 0;\n            }\n            stbtt__buf_seek(b, fdarrayoff);\n            info.fontdicts = stbtt__cff_get_index(b);\n            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);\n        }\n\n        stbtt__buf_seek(b, charstrings);\n        info.charstrings = stbtt__cff_get_index(b);\n    }\n\n    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);  //\"maxp\"\n    if (t) {\n        info.numGlyphs = ttUSHORT(data, t + 4);\n    }\n    else {\n        info.numGlyphs = 0xffff;\n    }\n\n    numTables = ttUSHORT(data, cmap + 2);\n    info.index_map = 0;\n    for (i = 0; i < numTables; ++i) {\n        var encoding_record = cmap + 4 + 8 * i;\n\n        switch (ttUSHORT(data, encoding_record)) {\n        case STBTT_PLATFORM_ID_MICROSOFT:\n            switch (ttUSHORT(data, encoding_record + 2)) {\n            case STBTT_MS_EID_UNICODE_BMP:\n            case STBTT_MS_EID_UNICODE_FULL:\n                info.index_map = cmap + ttULONG(data, encoding_record + 4);\n                break;\n            }\n            break;\n        case STBTT_PLATFORM_ID_UNICODE:\n            info.index_map = cmap + ttULONG(data, encoding_record + 4);\n            break;\n        }\n    }\n    if (info.index_map == 0) {\n        return 0;\n    }\n\n    info.indexToLocFormat = ttUSHORT(data, info.head + 50);\n    return 1;\n}\n\n//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)\nfunction stbtt_FindGlyphIndex(info, unicode_codepoint) {\n    var data = info.data, index_map = info.index_map;\n\n    var format = ttUSHORT(data, index_map + 0);\n    if (format == 0) {\n        var bytes = ttUSHORT(data, index_map + 2);\n        if (unicode_codepoint < bytes - 6) {\n            return data[index_map + 6 + unicode_codepoint];\n        }\n        return 0;\n    } else if (format == 6) {\n        var first = ttUSHORT(data, index_map + 6),\n            count = ttUSHORT(data, index_map + 8);\n        if (unicode_codepoint >= first && unicode_codepoint < first + count) {\n            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);\n        }\n        return 0;\n    } else if (format == 2) {\n        return 0;\n    } else if (format == 4) {\n        var segcount = ttUSHORT(data, index_map + 6) >> 1,\n            searchRange = ttUSHORT(data, index_map + 8) >> 1,\n            entrySelector = ttUSHORT(data, index_map + 10),\n            rangeShift = ttUSHORT(data, index_map + 12) >> 1,\n            endCount = index_map + 14,\n            search = endCount;\n\n        if (unicode_codepoint > 0xffff) {\n            return 0;\n        }\n\n        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {\n            search += rangeShift * 2;\n        }\n\n        search -= 2;\n        while (entrySelector) {\n            searchRange >>= 1;\n            var end = ttUSHORT(data, search + searchRange * 2);\n            if (unicode_codepoint > end) {\n                search += searchRange * 2;\n            }\n            --entrySelector;\n        }\n        search += 2;\n\n        var offset, start, item = (search - endCount) >>> 1;\n\n        start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);\n        if (unicode_codepoint < start) {\n            return 0;\n        }\n\n        offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);\n        if (offset == 0) {\n            return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);\n        }\n        return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +\n                                index_map + 14 + segcount * 6 + 2 + 2 * item);\n    } else if (format == 12 || format == 13) {\n        var ngroups = ttULONG(data, index_map + 12),\n            low = 0, high = ngroups;\n         while (low < high) {\n            var mid = low + ((high - low) >> 1);\n            var start_char = ttULONG(data, index_map + 16 + mid * 12);\n            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);\n            if (unicode_codepoint < start_char) {\n                high = mid;\n            } else if (unicode_codepoint > end_char) {\n                low = mid + 1;\n            } else {\n                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);\n                if (format == 12) {\n                    return start_glyph + unicode_codepoint - start_char;\n                } else {\n                    return start_glyph;\n                }\n            }\n        }\n        return 0;\n    }\n    return 0;\n}\n\n//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)\nfunction stbtt_setvertex(v, type, x, y, cx, cy) {\n    v.type = type;\n    v.x = x;\n    v.y = y;\n    v.cx = cx;\n    v.cy = cy;\n}\n\n//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)\nfunction stbtt__GetGlyfOffset(info, glyph_index) {\n    var  g1, g2;\n    if (glyph_index >= info.numGlyphs) {\n        return -1;\n    }\n    if (info.indexToLocFormat >= 2) {\n        return -1;\n    }\n\n    if (info.indexToLocFormat == 0) {\n        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;\n        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;\n    } else {\n        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);\n        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);\n    }\n\n    return g1 == g2 ? -1 : g1;\n}\n\n//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)\nfunction stbtt_GetGlyphBox(info, glyph_index, out) {\n    if (info.cff.length) {\n        stbtt__GetGlyphInfoT2(info, glyph_index, out);\n    } else {\n        var g = stbtt__GetGlyfOffset(info, glyph_index);\n        if (g < 0) {\n            return 0;\n        }\n        out.x0 = ttSHORT(info.data, g + 2);\n        out.y0 = ttSHORT(info.data, g + 4);\n        out.x1 = ttSHORT(info.data, g + 6);\n        out.y1 = ttSHORT(info.data, g + 8);\n    }\n    return 1;\n}\n\n//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,\n//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)\nfunction stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {\n    if (start_off) {\n        if (was_off) {\n            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,\n                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);\n        }\n        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);\n    } else {\n        if (was_off) {\n            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);\n        } else {\n            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);\n        }\n    }\n    return num_vertices;\n}\n\n//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)\nfunction stbtt__GetGlyphShapeTT(info, glyph_index) {\n    var data = info.data,\n        g = stbtt__GetGlyfOffset(info, glyph_index);\n\n    if (g < 0) {\n        return null;\n    }\n\n    var vertices = [];\n    var numberOfContours = ttSHORT(data, g);\n    if (numberOfContours > 0) {\n        var flags = 0, flagcount,\n            i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,\n            x, y, cx, cy, sx, sy, scx, scy;\n        var endPtsOfContours = g + 10;\n        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);\n        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);\n        var ptsoff = 0;\n\n        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);\n        m = n + 2 * numberOfContours;\n\n        vertices = oalloc(m);\n        next_move = 0;\n        flagcount = 0;\n        off = m - n;\n\n        for (i = 0; i < n; ++i) {\n            if (flagcount == 0) {\n                flags = points[ptsoff++];\n                if (flags & 8) {\n                    flagcount = points[ptsoff++];\n                }\n            } else {\n                --flagcount;\n            }\n            vertices[off + i].type = flags;\n        }\n\n        x = 0;\n        for (i = 0; i < n; ++i) {\n            flags = vertices[off + i].type;\n            if (flags & 2) {\n                var dx = points[ptsoff++];\n                x += (flags & 16) ? dx : -dx;\n            } else {\n                if (!(flags & 16)) {\n                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);\n                    ptsoff += 2;\n                }\n            }\n            vertices[off + i].x = x;\n        }\n\n        y = 0;\n        for (i = 0; i < n; ++i) {\n            flags = vertices[off + i].type;\n            if (flags & 4) {\n                var dy = points[ptsoff++];\n                y += (flags & 32) ? dy : -dy;\n            } else {\n                if (!(flags & 32)) {\n                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);\n                    ptsoff += 2;\n                }\n            }\n            vertices[off + i].y = y;\n        }\n\n        var num_vertices = 0;\n        sx = sy = cx = cy = scx = scy = 0;\n        for (i = 0; i < n; ++i) {\n            flags = vertices[off + i].type;\n            x = vertices[off + i].x;\n            y = vertices[off + i].y;\n\n            if (next_move == i) {\n                if (i != 0) {\n                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,\n                                            sx, sy, scx, scy, cx, cy);\n                }\n                start_off = !(flags & 1);\n                if (start_off) {\n                    scx = x;\n                    scy = y;\n                    if (!(vertices[off + i + 1].type & 1)) {\n                        sx = (x + vertices[off + i + 1].x) >> 1;\n                        sy = (y + vertices[off + i + 1].y) >> 1;\n                    } else {\n                        sx = vertices[off + i + 1].x;\n                        sy = vertices[off + i + 1].y;\n                        ++i;\n                    }\n                } else {\n                    sx = x;\n                    sy = y;\n                }\n                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);\n                was_off = 0;\n                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);\n                ++j;\n            } else {\n                if (!(flags & 1)) {\n                    if (was_off) {\n                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,\n                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);\n                    }\n                    cx = x;\n                    cy = y;\n                    was_off = 1;\n                } else {\n                    if (was_off) {\n                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);\n                    } else {\n                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);\n                    }\n                    was_off = 0;\n                }\n            }\n        }\n        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,\n                                                sx, sy, scx, scy, cx, cy);\n    } else if (numberOfContours == -1) {\n        var more = 1;\n        var comp = g + 10;\n         while (more) {\n            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];\n\n            flags = ttSHORT(data, comp);\n            comp += 2;\n            gidx = ttSHORT(data, comp);\n            comp += 2;\n\n            if (flags & 2) {\n                if (flags & 1) {\n                    mtx[4] = ttSHORT(data, comp);\n                    comp += 2;\n                    mtx[5] = ttSHORT(data, comp);\n                    comp += 2;\n                } else {\n                    mtx[4] = stbtt__buf_get8(data, comp);\n                    comp += 1;\n                    mtx[5] = stbtt__buf_get8(data, comp);\n                    comp += 1;\n                }\n            }\n            if (flags & (1 << 3)) {\n                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n                mtx[1] = mtx[2] = 0;\n            } else if (flags & (1 << 6)) {\n                mtx[0] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n                mtx[1] = mtx[2] = 0;\n                mtx[3] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n            } else if (flags & (1 << 7)) {\n                mtx[0] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n                mtx[1] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n                mtx[2] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n                mtx[3] = ttSHORT(data, comp) / 16384.0;\n                comp += 2;\n            }\n\n            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);\n            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);\n            var comp_verts = stbtt_GetGlyphShape(info, gidx);\n            if (comp_verts.length > 0) {\n                for (var i = 0, l = comp_verts.length; i < l; ++i) {\n                    var v = comp_verts[i], x, y;\n                    x = v.x;\n                    y = v.y;\n                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));\n                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));\n                    x = v.cx;\n                    y = v.cy;\n                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));\n                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));\n                }\n\n                vertices = vertices.concat(comp_verts);\n            }\n            more = flags & (1 << 5);\n        }\n    }\n    //console.log('vertices(' + vertices.length + ')');\n    //for (var i = 0; i < vertices.length; i++) {\n    //  var pt = vertices[i];\n    //  console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);\n    //}\n\n    return vertices;\n}\n\n//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)\nfunction stbtt__track_vertex(c, x, y) {\n    if (x > c.max_x || !c.started) {\n        c.max_x = x;\n    }\n    if (y > c.max_y || !c.started) {\n        c.max_y = y;\n    }\n    if (x < c.min_x || !c.started) {\n        c.min_x = x;\n    }\n    if (y < c.min_y || !c.started) {\n        c.min_y = y;\n    }\n    c.started = 1;\n}\n\n//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)\nfunction stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {\n    stbtt__track_vertex(c, x, y);\n    if (type == STBTT_vcubic) {\n        stbtt__track_vertex(c, cx, cy);\n        stbtt__track_vertex(c, cx1, cy1);\n    }\n    var v = {};\n    stbtt_setvertex(v, type, x, y, cx, cy);\n    v.cx1 = cx1;\n    v.cy1 = cy1;\n    c.vertices.push(v);\n }\n\n//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)\nfunction stbtt__csctx_close_shape(ctx) {\n    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {\n        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);\n    }\n}\n\n//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)\nfunction stbtt__csctx_rmove_to(ctx, dx, dy) {\n    stbtt__csctx_close_shape(ctx);\n    ctx.first_x = ctx.x = ctx.x + dx;\n    ctx.first_y = ctx.y = ctx.y + dy;\n    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);\n}\n\n//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)\nfunction stbtt__csctx_rline_to(ctx, dx, dy) {\n    ctx.x += dx;\n    ctx.y += dy;\n    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);\n}\n\n//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,\n//                                  float dy2, float dx3, float dy3)\nfunction stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {\n    var cx1 = ctx.x + dx1,\n        cy1 = ctx.y + dy1,\n        cx2 = cx1 + dx2,\n        cy2 = cy1 + dy2;\n    ctx.x = cx2 + dx3;\n    ctx.y = cy2 + dy3;\n    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);\n}\n\n//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)\nfunction stbtt__get_subr(b, n) {\n    var count = stbtt__cff_index_count(b);\n    var bias = 107;\n    if (count >= 33900) {\n        bias = 32768;\n    } else if (count >= 1240) {\n        bias = 1131;\n    }\n    n += bias;\n    if (n < 0 || n >= count) {\n        return stbtt__null_buf();\n    }\n    return stbtt__cff_index_get(b, n);\n}\n\n//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)\nfunction stbtt__cid_get_glyph_subrs(info, glyph_index) {\n    var fdselect = info.fdselect;\n    var nranges, start, end, v, fmt, fdselector = -1, i;\n\n    stbtt__buf_seek(fdselect, 0);\n    fmt = stbtt__buf_get8(fdselect);\n    if (fmt == 0) {\n        stbtt__buf_skip(fdselect, glyph_index);\n        fdselector = stbtt__buf_get8(fdselect);\n    } else if (fmt == 3) {\n        nranges = stbtt__buf_get(fdselect, 2);\n        start = stbtt__buf_get(fdselect, 2);\n        for (i = 0; i < nranges; i++) {\n            v = stbtt__buf_get8(fdselect);\n            end = stbtt__buf_get(fdselect, 2);\n            if (glyph_index >= start && glyph_index < end) {\n                fdselector = v;\n                break;\n            }\n            start = end;\n        }\n    }\n    if (fdselector == -1) {\n        stbtt__null_buf();\n    }\n    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));\n}\n\n//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,\n//                                 stbtt__csctx * c)\nfunction stbtt__run_charstring(info, glyph_index, c) {\n    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,\n        has_subrs = 0, clear_stack,\n        s = [], subr_stack = [], subrs = info.subrs, b, f;\n\n    b = stbtt__cff_index_get(info.charstrings, glyph_index);\n    while (b.cursor < b.length) {\n        i = 0;\n        clear_stack = 1;\n        b0 = stbtt__buf_get8(b);\n        switch (b0) {\n        case 0x13:\n        case 0x14:\n            if (in_header) {\n                maskbits += (sp / 2)|0;\n            }\n            in_header = 0;\n            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);\n            break;\n\n        case 0x01:\n        case 0x03:\n        case 0x12:\n        case 0x17:\n            maskbits += (sp / 2)|0;\n            break;\n\n        case 0x15:\n            in_header = 0;\n            if (sp < 2) {\n                return 0;\n            }\n            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);\n            break;\n        case 0x04:\n            in_header = 0;\n            if (sp < 1) {\n                return 0;\n            }\n            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);\n            break;\n        case 0x16:\n            in_header = 0;\n            if (sp < 1) {\n                return 0;\n            }\n            stbtt__csctx_rmove_to(c, s[sp - 1], 0);\n            break;\n\n        case 0x05:\n            if (sp < 2) {\n                return 0;\n            }\n            for (; i + 1 < sp; i += 2) {\n                stbtt__csctx_rline_to(c, s[i], s[i + 1]);\n            }\n            break;\n\n        case 0x07:\n            if (sp < 1) {\n                return 0;\n            }\n            for (;;) {\n                if (i >= sp) {\n                    break;\n                }\n                stbtt__csctx_rline_to(c, 0, s[i]);\n                i++;\n                if (i >= sp) {\n                    break;\n                }\n                stbtt__csctx_rline_to(c, s[i], 0);\n                i++;\n            }\n            break;\n        case 0x06:\n            if (sp < 1) {\n                return 0;\n            }\n            for (;;) {\n                if (i >= sp) {\n                    break;\n                }\n                stbtt__csctx_rline_to(c, s[i], 0);\n                i++;\n                if (i >= sp) {\n                    break;\n                }\n                stbtt__csctx_rline_to(c, 0, s[i]);\n                i++;\n            }\n            break;\n\n        case 0x1F:\n            if (sp < 4) {\n                return 0;\n            }\n            for (;;) {\n                if (i + 3 >= sp) {\n                    break;\n                }\n                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],\n                                        (sp - i == 5) ? s[i + 4] : 0.0,\n                                        s[i + 3]);\n                i += 4;\n                if (i + 3 >= sp) {\n                    break;\n                }\n                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],\n                                        s[i + 2], s[i + 3],\n                                        (sp - i == 5) ? s[i + 4] : 0.0);\n                i += 4;\n            }\n            break;\n        case 0x1E:\n            if (sp < 4) {\n                return 0;\n            }\n            for (;;) {\n                if (i + 3 >= sp) {\n                    break;\n                }\n                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],\n                                        s[i + 2], s[i + 3],\n                                        (sp - i == 5) ? s[i + 4] : 0.0);\n                i += 4;\n                if (i + 3 >= sp) {\n                    break;\n                }\n                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],\n                                        (sp - i == 5) ? s[i + 4] : 0.0,\n                                        s[i + 3]);\n                i += 4;\n            }\n            break;\n\n        case 0x08:\n            if (sp < 6) {\n                return 0;\n            }\n            for (; i + 5 < sp; i += 6) {\n                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],\n                                        s[i + 2], s[i + 3],\n                                        s[i + 4], s[i + 5]);\n            }\n            break;\n\n        case 0x18:\n            if (sp < 8) {\n                return 0;\n            }\n            for (; i + 5 < sp - 2; i += 6) {\n                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],\n                                        s[i + 2], s[i + 3],\n                                        s[i + 4], s[i + 5]);\n            }\n            if (i + 1 >= sp) {\n                return 0;\n            }\n            stbtt__csctx_rline_to(c, s[i], s[i + 1]);\n            break;\n\n        case 0x19:\n            if (sp < 8) {\n                return 0;\n            }\n            for (; i + 1 < sp - 6; i += 2) {\n                stbtt__csctx_rline_to(c, s[i], s[i + 1]);\n            }\n            if (i + 5 >= sp) {\n                return 0;\n            }\n            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],\n                                    s[i + 3], s[i + 4], s[i + 5]);\n            break;\n\n        case 0x1A:\n        case 0x1B:\n            if (sp < 4) {\n                return 0;\n            }\n            f = 0.0;\n            if (sp & 1) {\n                f = s[i];\n                i++;\n            }\n            for (; i + 3 < sp; i += 4) {\n                if (b0 == 0x1B) {\n                    stbtt__csctx_rccurve_to(c, s[i], f,\n                                            s[i + 1],\n                                            s[i + 2],\n                                            s[i + 3], 0.0);\n                } else {\n                    stbtt__csctx_rccurve_to(c, f, s[i],\n                                            s[i + 1],\n                                            s[i + 2], 0.0,\n                                            s[i + 3]);\n                }\n                f = 0.0;\n            }\n            break;\n\n        case 0x0A:\n            if (!has_subrs) {\n                if (info.fdselect.length) {\n                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);\n                }\n                has_subrs = 1;\n            }\n\n        case 0x1D:\n            if (sp < 1) {\n                return 0;\n            }\n            v = s[--sp]|0;\n            if (subr_stack_height >= 10) {\n                return 0;\n            }\n            subr_stack[subr_stack_height++] = b;\n            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);\n            if (b.length == 0) {\n                return 0;\n            }\n            b.cursor = 0;\n            clear_stack = 0;\n            break;\n\n        case 0x0B:\n            if (subr_stack_height <= 0) {\n                return 0;\n            }\n            b = subr_stack[--subr_stack_height];\n            clear_stack = 0;\n            break;\n\n        case 0x0E:\n            stbtt__csctx_close_shape(c);\n            return 1;\n\n        case 0x0C:\n            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,\n                dx, dy, b1 = stbtt__buf_get8(b);\n            switch (b1) {\n            case 0x22:\n                if (sp < 7) {\n                    return 0;\n                }\n                dx1 = s[0];\n                dx2 = s[1];\n                dy2 = s[2];\n                dx3 = s[3];\n                dx4 = s[4];\n                dx5 = s[5];\n                dx6 = s[6];\n                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);\n                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);\n                break;\n\n            case 0x23:\n                if (sp < 13) {\n                    return 0;\n                }\n                dx1 = s[0];\n                dy1 = s[1];\n                dx2 = s[2];\n                dy2 = s[3];\n                dx3 = s[4];\n                dy3 = s[5];\n                dx4 = s[6];\n                dy4 = s[7];\n                dx5 = s[8];\n                dy5 = s[9];\n                dx6 = s[10];\n                dy6 = s[11];\n\n                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);\n                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);\n                break;\n\n            case 0x24:\n                if (sp < 9) {\n                    return 0;\n                }\n                dx1 = s[0];\n                dy1 = s[1];\n                dx2 = s[2];\n                dy2 = s[3];\n                dx3 = s[4];\n                dx4 = s[5];\n                dx5 = s[6];\n                dy5 = s[7];\n                dx6 = s[8];\n                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);\n                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));\n                break;\n\n            case 0x25:\n                if (sp < 11) {\n                    return 0;\n                }\n                dx1 = s[0];\n                dy1 = s[1];\n                dx2 = s[2];\n                dy2 = s[3];\n                dx3 = s[4];\n                dy3 = s[5];\n                dx4 = s[6];\n                dy4 = s[7];\n                dx5 = s[8];\n                dy5 = s[9];\n                dx6 = dy6 = s[10];\n                dx = dx1 + dx2 + dx3 + dx4 + dx5;\n                dy = dy1 + dy2 + dy3 + dy4 + dy5;\n                if (abs(dx) > abs(dy)) {\n                    dy6 = -dy;\n                } else {\n                    dx6 = -dx;\n                }\n                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);\n                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);\n                break;\n\n            default:\n                return 0;\n            }\n            break;\n\n        default:\n            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {\n                return 0;\n            }\n            if (b0 == 255) {\n                // f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;\n                f = (stbtt__buf_get(b, 4)|0) / 0x10000;\n            } else {\n                stbtt__buf_skip(b, -1);\n                // f = (float)(stbtt_int16)stbtt__cff_int(&b);\n                f = ((stbtt__cff_int(b)<<16)|0)>>16;\n            }\n            if (sp >= 48) {\n                return 0;\n            }\n            s[sp++] = f;\n            clear_stack = 0;\n            break;\n        }\n        if (clear_stack) {\n            sp = 0;\n        }\n    }\n    return 0;\n}\n\nfunction stbtt__csctx_init() {\n    return { started:0, first_x:0, first_y:0, x:0, y:0,\n            min_x:0, max_x:0, min_y:0, max_y:0,\n            vertices:[]\n        };\n}\n\n//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,\n//                                  stbtt_vertex ** pvertices)\nfunction stbtt__GetGlyphShapeT2(info, glyph_index) {\n    var output_ctx = stbtt__csctx_init();\n    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {\n        return output_ctx.vertices;\n    }\n    return null;\n}\n\n//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,\n//                      int *y0, int *x1, int *y1)\nfunction stbtt__GetGlyphInfoT2(info, glyph_index, out) {\n    var c = stbtt__csctx_init();\n    var r = stbtt__run_charstring(info, glyph_index, c);\n    out.x0 = r ? c.min_x : 0;\n    out.y0 = r ? c.min_y : 0;\n    out.x1 = r ? c.max_x : 0;\n    out.y1 = r ? c.max_y : 0;\n    return r && c.vertices ? c.vertices.length : 0;\n}\n\n//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,\n//                               stbtt_vertex ** pvertices)\nfunction stbtt_GetGlyphShape(info, glyph_index) {\n    if (!info.cff.length) {\n        return stbtt__GetGlyphShapeTT(info, glyph_index);\n    } else {\n        return stbtt__GetGlyphShapeT2(info, glyph_index);\n    }\n}\n\n//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,\n//                       int *advanceWidth, int *leftSideBearing)\nfunction stbtt_GetGlyphHMetrics(info, glyph_index) {\n    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);\n    if (glyph_index < numOfLongHorMetrics) {\n        return {\n                advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),\n                leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)\n            };\n    } else {\n        return {\n                advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),\n                leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +\n                                            2 * (glyph_index - numOfLongHorMetrics))\n            };\n    }\n}\n\n//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,\n//                           int *advanceWidth, int *leftSideBearing)\nfunction stbtt_GetCodepointHMetrics(info, codepoint) {\n     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));\n}\n\n//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)\nfunction stbtt_GetFontVMetrics(info) {\n    return {\n        ascent: ttSHORT(info.data, info.hhea + 4),\n        descent:ttSHORT(info.data, info.hhea + 6),\n        linegap:ttSHORT(info.data, info.hhea + 8),\n    };\n}\n\n//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,\n//                              float scale_x, float scale_y, float shift_x, float shift_y,\n//                              int *ix0, int *iy0, int *ix1, int *iy1)\nfunction stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {\n    var tmp = {};\n    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {\n        return { x0:0, y0:0, x1:0, y1:0 };\n    }\n    return {\n            x0:floor(tmp.x0 * scale_x + shift_x),\n            y0:floor(-tmp.y1 * scale_y + shift_y),\n            x1:ceil(tmp.x1 * scale_x + shift_x),\n            y1:ceil(-tmp.y0 * scale_y + shift_y),\n        };\n}\n\n//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,\n//                                    int codepoint, float scale_x, float scale_y, float shift_x,\n//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)\nfunction stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {\n    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),\n                                            scale_x, scale_y, shift_x, shift_y);\n}\n\n//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,   float scale_x, float scale_y,\n//                                      int *ix0, int *iy0, int *ix1, int *iy1)\nfunction stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {\n    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);\n}\n\n//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)\nfunction stbtt__new_active(e, off_x, start_point) {\n    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);\n    return {\n        fdx:dxdy,\n        fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,\n        fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),\n        direction:e.invert ? 1.0 : -1.0,\n        sy:e.y0,\n        ey:e.y1,\n        next:0,\n    };\n}\n\n//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,\n//                           float x0, float y0, float x1, float y1)\nfunction stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {\n    x = x|0;\n    if (y0 == y1) {\n        return;\n    }\n    if (y0 > e.ey) {\n        return;\n    }\n    if (y1 < e.sy) {\n        return;\n    }\n    if (y0 < e.sy) {\n        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);\n        y0 = e.sy;\n    }\n    if (y1 > e.ey) {\n        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);\n        y1 = e.ey;\n    }\n\n    if (x0 <= x && x1 <= x) {\n        scanline[x] += e.direction * (y1 - y0);\n    } else if (x0 >= x + 1 && x1 >= x + 1) {\n\n    } else {\n        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);\n    }\n}\n\n//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,\n//                             stbtt__active_edge * e, float y_top)\n// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in\n// places in this function.  That doesn't work with array-views, so we reverse the handling.\nfunction stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {\n    var y_bottom = y_top + 1;\n    while (e) {\n        if (e.fdx == 0) {\n            var x0 = e.fx;\n            if (x0 < len) {\n                if (x0 >= 0) {\n                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);\n                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);\n                } else {\n                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);\n                }\n            }\n        } else {\n            var x0 = e.fx,\n                dx = e.fdx,\n                xb = x0 + dx,\n                x_top, x_bottom,\n                sy0, sy1,\n                dy = e.fdy;\n\n            if (e.sy > y_top) {\n                x_top = x0 + dx * (e.sy - y_top);\n                sy0 = e.sy;\n            } else {\n                x_top = x0;\n                sy0 = y_top;\n            }\n            if (e.ey < y_bottom) {\n                x_bottom = x0 + dx * (e.ey - y_top);\n                sy1 = e.ey;\n            } else {\n                x_bottom = xb;\n                sy1 = y_bottom;\n            }\n\n            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {\n                if ((x_top|0) == (x_bottom|0)) {\n                    var height = sy1 - sy0,\n                        x = x_top|0;\n                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;\n                    scanline_fill[x+1] += e.direction * height;\n                } else {\n                    var t, x, x1, x2, y_crossing, step, sign, area;\n                    if (x_top > x_bottom) {\n                        sy0 = y_bottom - (sy0 - y_top);\n                        sy1 = y_bottom - (sy1 - y_top);\n                        t = sy0, sy0 = sy1, sy1 = t;\n                        t = x_bottom, x_bottom = x_top, x_top = t;\n                        dx = -dx;\n                        dy = -dy;\n                        t = x0, x0 = xb, xb = t;\n                    }\n\n                    x1 = x_top|0;\n                    x2 = x_bottom|0;\n                    y_crossing = (x1 + 1 - x0) * dy + y_top;\n                    sign = e.direction;\n                    area = sign * (y_crossing - sy0);\n\n                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);\n\n                    step = sign * dy;\n                    for (x = x1 + 1; x < x2; ++x) {\n                        scanline[x] += area + step / 2;\n                        area += step;\n                    }\n                    y_crossing += dy * (x2 - (x1 + 1));\n\n                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *\n                                                (sy1 - y_crossing);\n                    scanline_fill[x2+1] += sign * (sy1 - sy0);\n                }\n            } else {\n                for (var x = 0; x < len; ++x) {\n                    var y0 = y_top,\n                        x1 = x,\n                        x2 = x + 1,\n                        x3 = xb,\n                        y3 = y_bottom,\n                        y1 = (x - x0) / dx + y_top,\n                        y2 = (x + 1 - x0) / dx + y_top;\n\n                    if (x0 < x1 && x3 > x2) {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);\n                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);\n                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);\n                    } else if (x3 < x1 && x0 > x2) {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);\n                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);\n                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);\n                    } else if (x0 < x1 && x3 > x1) {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);\n                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);\n                    } else if (x3 < x1 && x0 > x1) {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);\n                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);\n                    } else if (x0 < x2 && x3 > x2) {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);\n                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);\n                    } else if (x3 < x2 && x0 > x2) {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);\n                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);\n                    } else {\n                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);\n                    }\n                }\n            }\n        }\n        e = e.next;\n    }\n}\n\n//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,\n//                              int vsubsample, int off_x, int off_y, void *userdata)\nfunction stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {\n    vsubsample |= 0, off_x |= 0, off_y |= 0;\n    var active = null, z;\n    var y = off_y, j = 0, i;\n    var scanline = new Float32Array(result.w * 2 + 1);\n    var scanline2 = scanline.subarray(result.w);\n    var eoff = 0;\n\n    edges[nedges].y0 = off_y + result.h + 1;\n    while (j < result.h) {\n        var scan_y_top = y + 0.0,\n            scan_y_bottom = y + 1.0,\n            step = active;\n\n        // F'ing IE\n        if (scanline.fill) { scanline.fill(0); }\n        else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }\n\n        while (step) {\n            z = step;\n            step = z.next;\n            if (z.ey <= scan_y_top) {\n                z.direction = 0;\n            } else {\n            }\n        }\n\n        while (edges[eoff].y0 <= scan_y_bottom) {\n            if (edges[eoff].y0 != edges[eoff].y1) {\n                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);\n                z.next = active;\n                active = z;\n            }\n            ++eoff;\n        }\n\n        if (active) {\n            // C implementation passed scanline2+1.  See function for details.\n            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);\n        }\n        for (var i = 0, sum = 0; i < result.w; ++i) {\n            var k, m;\n            sum += scanline2[i];\n            k = scanline[i] + sum;\n            k = abs(k) * 255 + 0.5;\n            m = k>>>0;\n            if (m > 255) {\n                m = 255;\n            }\n            result.pixels[j * result.stride + i] = m;\n        }\n\n        step = active;\n        while (step) {\n            z = step;\n            z.fx += z.fdx;\n            step = z.next;\n        }\n        ++y;\n        ++j;\n    }\n}\n\n//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)\nfunction stbtt__sort_edges_ins_sort(p, n) {\n    for (var i = 1; i < n; ++i) {\n        var t = p[i], j = i;\n        while (j > 0 && t.y0 < p[j-1].y0) {\n             p[j] = p[j - 1];\n            --j;\n        }\n        if (i != j) {\n            p[j] = t;\n        }\n    }\n}\n\n//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)\n// The C implementation messed with the p pointer.  JS uses an offset instead.\nfunction stbtt__sort_edges_quicksort(p, o, n) {\n    while (n > 12) {\n        var t, c, i, j, z,\n            m = n >> 1,\n            c01 = p[o].y0 < p[o+m].y0,\n            c12 = p[o+m].y0 < p[o+n-1].y0;\n\n        if (c01 != c12) {\n            c = p[o].y0 < p[o+n-11].y0;\n            z = (c == c12) ? 0 : n - 1;\n            t = p[o+z];\n            p[o+z] = p[o+m];\n            p[o+m] = t;\n        }\n\n        t = p[o];\n        p[o] = p[o+m];\n        p[o+m] = t;\n\n        i = 1;\n        j = n - 1;\n        for (;;) {\n            for ( ; p[o+i].y0 < p[o].y0; ++i) {\n            }\n            for ( ; p[o].y0 < p[o+j].y0; --j) {\n            }\n            if (i >= j) {\n                break;\n            }\n            t = p[o+i];\n            p[o+i] = p[o+j];\n            p[o+j] = t;\n\n            ++i;\n            --j;\n        }\n\n        if (j < n - i) {\n            stbtt__sort_edges_quicksort(p, o, j);\n            o += i;\n            n -= i;\n        } else {\n            stbtt__sort_edges_quicksort(p, o + i, n - i);\n            n = j;\n        }\n    }\n}\n\n//static void stbtt__sort_edges(stbtt__edge * p, int n)\nfunction stbtt__sort_edges(p, n) {\n    stbtt__sort_edges_quicksort(p, 0, n);\n    stbtt__sort_edges_ins_sort(p, n);\n}\n\n//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,\n//                 int windings, float scale_x, float scale_y, float shift_x,\n//                 float shift_y, int off_x, int off_y, int invert,\n//                 void *userdata)\nfunction stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {\n    var y_scale_inv = invert ? -scale_y : scale_y,\n        e, n, i, j, k, m,\n        vsubsample = 1;\n\n    n = 0;\n    for (i = 0; i < wcount.length; ++i) {\n        n += wcount[i];\n    }\n\n    e = oalloc(n + 1);\n    n = 0;\n    m = 0;\n    for (i = 0; i < wcount.length; ++i) {\n        var p = m;\n        m += wcount[i];\n        j = wcount[i] - 1;\n        for (k = 0; k < wcount[i]; j = k++) {\n            var a = k, b = j;\n            if (pts[p+j].y == pts[p+k].y) {\n                continue;\n            }\n\n            e[n].invert = 0;\n            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {\n                e[n].invert = 1;\n                a = j, b = k;\n            }\n            e[n].x0 = pts[p+a].x * scale_x + shift_x;\n            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;\n            e[n].x1 = pts[p+b].x * scale_x + shift_x;\n            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;\n            ++n;\n        }\n    }\n\n    stbtt__sort_edges(e, n);\n    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);\n }\n\n//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,\n//                       float y0, float x1, float y1, float x2, float y2,\n//                       float objspace_flatness_squared, int n)\nfunction stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {\n    var mx = (x0 + 2 * x1 + x2) / 4,\n        my = (y0 + 2 * y1 + y2) / 4,\n        dx = (x0 + x2) / 2 - mx,\n        dy = (y0 + y2) / 2 - my;\n    if (n > 16) {\n        return 1;\n    }\n    if (dx * dx + dy * dy > objspace_flatness_squared) {\n        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,\n                               objspace_flatness_squared, n + 1);\n        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,\n                               objspace_flatness_squared, n + 1);\n    } else {\n        points.push({ x:x2, y:y2 });\n    }\n    return 1;\n}\n\n//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,\n//                       float y0, float x1, float y1, float x2, float y2,\n//                       float x3, float y3, float objspace_flatness_squared, int n)\nfunction stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {\n    var dx0 = x1 - x0,\n        dy0 = y1 - y0,\n        dx1 = x2 - x1,\n        dy1 = y2 - y1,\n        dx2 = x3 - x2,\n        dy2 = y3 - y2,\n        dx = x3 - x0,\n        dy = y3 - y0,\n        longlen = sqrt(dx0 * dx0 + dy0 * dy0) +\n                  sqrt(dx1 * dx1 + dy1 * dy1) +\n                  sqrt(dx2 * dx2 + dy2 * dy2),\n        shortlen = sqrt(dx * dx + dy * dy),\n        flatness_squared = longlen * longlen - shortlen * shortlen;\n    if (n > 16) {\n        return;\n    }\n\n    if (flatness_squared > objspace_flatness_squared) {\n        var x01 = (x0 + x1) / 2,\n            y01 = (y0 + y1) / 2,\n            x12 = (x1 + x2) / 2,\n            y12 = (y1 + y2) / 2,\n            x23 = (x2 + x3) / 2,\n            y23 = (y2 + y3) / 2,\n            xa = (x01 + x12) / 2,\n            ya = (y01 + y12) / 2,\n            xb = (x12 + x23) / 2,\n            yb = (y12 + y23) / 2,\n            mx = (xa + xb) / 2,\n            my = (ya + yb) / 2;\n\n        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,\n                                objspace_flatness_squared, n + 1);\n        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,\n                                objspace_flatness_squared, n + 1);\n    } else {\n        points.push({ x:x3, y:y3 });\n    }\n}\n\n//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,\n//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)\nfunction stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {\n    var points = [],\n        objspace_flatness_squared = objspace_flatness * objspace_flatness,\n        n = -1, start = 0,\n        x = 0, y = 0;\n    for (var i = 0, nverts = vertices.length; i < nverts; ++i) {\n        switch (vertices[i].type) {\n        case STBTT_vmove:\n            if (n >= 0) {\n                contour_lengths[n] = points.length - start;\n            }\n            ++n;\n            start = points.length;\n            x = vertices[i].x, y = vertices[i].y;\n            points.push({ x:x, y:y });\n            break;\n        case STBTT_vline:\n            x = vertices[i].x, y = vertices[i].y;\n            points.push({ x:x, y:y });\n            break;\n        case STBTT_vcurve:\n            stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,\n                                   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);\n            x = vertices[i].x, y = vertices[i].y;\n            break;\n        case STBTT_vcubic:\n            stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,\n                                   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,\n                                   objspace_flatness_squared, 0);\n            x = vertices[i].x, y = vertices[i].y;\n            break;\n        }\n    }\n    contour_lengths[n] = points.length - start;\n\n    //console.log(\"--cl(\" + (n+1) + '):');\n    //for (var i = 0; i <= n; i++) {\n    //  console.log(\" %d\", contour_lengths[i]);\n    //}\n    //console.log(\"\\n--pts(\" + points.length + '):');\n    //for (var i = 0; i < points.length; i++) {\n    //  var pt = points[i];\n    //  console.log(i + ': ' + pt.x  + ',' + pt.y);\n    //}\n\n    return points;\n}\n\n//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,\n//                stbtt_vertex * vertices, int num_verts, float scale_x,\n//                float scale_y, float shift_x, float shift_y, int x_off,\n//                int y_off, int invert, void *userdata)\nfunction stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,\n                         x_off, y_off, invert) {\n    x_off |= 0, y_off |= 0;\n    var scale = scale_x > scale_y ? scale_y : scale_x,\n        wcount = [],\n        windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);\n    if (windings) {\n        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,\n                         shift_x, shift_y, x_off, y_off, invert);\n    }\n}\n\n//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,\n//                              unsigned char *output, int out_w, int out_h,\n//                              int out_stride, float scale_x, float scale_y,\n//                              float shift_x, float shift_y, int glyph)\nfunction stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,\n                                    scale_x, scale_y, shift_x, shift_y, glyph) {\n    var vertices = stbtt_GetGlyphShape(info, glyph);\n    var gbm = {};\n    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);\n    gbm.pixels = buffer;\n    gbm.w = out_w|0;\n    gbm.h = out_h|0;\n    gbm.stride = out_stride|0;\n\n    if (gbm.w && gbm.h) {\n        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);\n    }\n}\n\n//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,\n//                                  unsigned char *output, int out_w,\n//                                  int out_h, int out_stride, float scale_x,\n//                                  float scale_y, float shift_x,\n//                                  float shift_y, int codepoint)\nfunction stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,\n                                    scale_x, scale_y, shift_x, shift_y, codepoint) {\n    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,\n                                  scale_x, scale_y, shift_x, shift_y,\n                                  stbtt_FindGlyphIndex(info, codepoint));\n}\n\n//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)\nfunction stbtt_InitFont(font, data, offset) {\n    return stbtt_InitFont_internal(font, data, offset);\n}\n\n\nfunction InitFont(data) {\n    var font = {};\n    if (!stbtt_InitFont_internal(font, data, 0)) {\n        return null;\n    }\n\n    var vm = stbtt_GetFontVMetrics(font);\n\n    font.ascent = vm.ascent;\n    font.descent = vm.descent;\n    font.linegap = vm.linegap;\n\n    return font;\n}\n\nfunction GetGlyph(font, codepoint, size_x, size_y) {\n    size_y = size_y || size_x;\n    var scale_x = size_x / font.ascent;\n    var scale_y = size_y / font.ascent;\n\n    var glyph = stbtt_FindGlyphIndex(font, codepoint);\n    if (!glyph && codepoint) {\n        return null;\n    }\n\n    var vertices = stbtt_GetGlyphShape(font, glyph);\n    var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);\n    var width = rect.x1 - rect.x0;\n    var height = rect.y1 - rect.y0;\n    var pixels = null;\n\n    if (width && height) {\n        var gbm = {\n            pixels : (pixels = new Uint8Array(width * height)),\n            w : width,\n            h : height,\n            stride : width,\n        }\n        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);\n    }\n\n    var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);\n    return {\n        glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,\n        advance:floor(hmetrics.advanceWidth * scale_x),\n    }\n}\nfunction GetPaths(font, codepoint, size_x, size_y) {\n    size_y = size_y || size_x;\n    var scale_x = size_x / font.ascent;\n    var scale_y = size_y / font.ascent;\n\n    var glyph = stbtt_FindGlyphIndex(font, codepoint);\n    if (!glyph && codepoint) {\n        return null;\n    }\n    var vertices = stbtt_GetGlyphShape(font, glyph);\n    var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);\n\n    // The hmetrics just give us advance.  We need ascent and descent as well.\n    var ascent = 0;\n    var descent = 0;\n\n    // Convert to SVG notation\n    var paths = [];\n    if (vertices) {\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            var v = vertices[i];\n            var path;\n            if (v.type == STBTT_vmove) {\n                path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };\n            } else if (v.type == STBTT_vline) {\n                path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };\n            } else if (v.type == STBTT_vcurve) {\n                path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,\n                                  cx:v.cx * scale_x, cy:v.cy * scale_y };\n            } else if (v.type == STBTT_vcubic) {\n                path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,\n                                 cx1:v.cx * scale_x, cy1:v.cy * scale_y,\n                                 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };\n            } else {\n                continue;\n            }\n            if (path.y > ascent)  ascent  = path.y;\n            if (path.y < descent) descent = path.y;\n            paths.push(path);\n        }\n    }\n\n    // Add the glyph metrics to the returned array.\n    paths.advance = hmetrics.advanceWidth * scale_x;\n    paths.ascent  = ascent;\n    paths.descent = descent;\n    return paths;\n}\n\n\n// exports\nreturn {\n    InitFont:   InitFont,\n    GetGlyph:   GetGlyph,\n    GetPaths:   GetPaths,\n}\n\n})();\nfunction toUint8Array(data) {\n    if (typeof data == \"string\") {\n        var binary = /[^A-Za-z0-9+\\/=\\s]/.test(data);\n        return Buffer.from ? Buffer.from(data, binary ? 'binary' : 'base64')\n                           : new Buffer(data, binary ? 'binary' : 'base64');\n    } else if (data instanceof Uint8Array) {\n        return data;\n    } else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    throw new ReferenceError(\"data must be a binary or base64 encoded string or a Buffer/Uint8Array\");\n}\n\nFontLib.loadFont(\"OCR-A\", 100, 100, \"\");\nFontLib.loadFont(\"OCR-B\", 96, 100, \"\");\nexport function auspost(opts,dwg) { return _ToAny(bwipp_auspost,opts,dwg); };\nexport function azteccode(opts,dwg) { return _ToAny(bwipp_azteccode,opts,dwg); };\nexport function azteccodecompact(opts,dwg) { return _ToAny(bwipp_azteccodecompact,opts,dwg); };\nexport function aztecrune(opts,dwg) { return _ToAny(bwipp_aztecrune,opts,dwg); };\nexport function bc412(opts,dwg) { return _ToAny(bwipp_bc412,opts,dwg); };\nexport function channelcode(opts,dwg) { return _ToAny(bwipp_channelcode,opts,dwg); };\nexport function codablockf(opts,dwg) { return _ToAny(bwipp_codablockf,opts,dwg); };\nexport function code11(opts,dwg) { return _ToAny(bwipp_code11,opts,dwg); };\nexport function code128(opts,dwg) { return _ToAny(bwipp_code128,opts,dwg); };\nexport function code16k(opts,dwg) { return _ToAny(bwipp_code16k,opts,dwg); };\nexport function code2of5(opts,dwg) { return _ToAny(bwipp_code2of5,opts,dwg); };\nexport function code32(opts,dwg) { return _ToAny(bwipp_code32,opts,dwg); };\nexport function code39(opts,dwg) { return _ToAny(bwipp_code39,opts,dwg); };\nexport function code39ext(opts,dwg) { return _ToAny(bwipp_code39ext,opts,dwg); };\nexport function code49(opts,dwg) { return _ToAny(bwipp_code49,opts,dwg); };\nexport function code93(opts,dwg) { return _ToAny(bwipp_code93,opts,dwg); };\nexport function code93ext(opts,dwg) { return _ToAny(bwipp_code93ext,opts,dwg); };\nexport function codeone(opts,dwg) { return _ToAny(bwipp_codeone,opts,dwg); };\nexport function coop2of5(opts,dwg) { return _ToAny(bwipp_coop2of5,opts,dwg); };\nexport function daft(opts,dwg) { return _ToAny(bwipp_daft,opts,dwg); };\nexport function databarexpanded(opts,dwg) { return _ToAny(bwipp_databarexpanded,opts,dwg); };\nexport function databarexpandedcomposite(opts,dwg) { return _ToAny(bwipp_databarexpandedcomposite,opts,dwg); };\nexport function databarexpandedstacked(opts,dwg) { return _ToAny(bwipp_databarexpandedstacked,opts,dwg); };\nexport function databarexpandedstackedcomposite(opts,dwg) { return _ToAny(bwipp_databarexpandedstackedcomposite,opts,dwg); };\nexport function databarlimited(opts,dwg) { return _ToAny(bwipp_databarlimited,opts,dwg); };\nexport function databarlimitedcomposite(opts,dwg) { return _ToAny(bwipp_databarlimitedcomposite,opts,dwg); };\nexport function databaromni(opts,dwg) { return _ToAny(bwipp_databaromni,opts,dwg); };\nexport function databaromnicomposite(opts,dwg) { return _ToAny(bwipp_databaromnicomposite,opts,dwg); };\nexport function databarstacked(opts,dwg) { return _ToAny(bwipp_databarstacked,opts,dwg); };\nexport function databarstackedcomposite(opts,dwg) { return _ToAny(bwipp_databarstackedcomposite,opts,dwg); };\nexport function databarstackedomni(opts,dwg) { return _ToAny(bwipp_databarstackedomni,opts,dwg); };\nexport function databarstackedomnicomposite(opts,dwg) { return _ToAny(bwipp_databarstackedomnicomposite,opts,dwg); };\nexport function databartruncated(opts,dwg) { return _ToAny(bwipp_databartruncated,opts,dwg); };\nexport function databartruncatedcomposite(opts,dwg) { return _ToAny(bwipp_databartruncatedcomposite,opts,dwg); };\nexport function datalogic2of5(opts,dwg) { return _ToAny(bwipp_datalogic2of5,opts,dwg); };\nexport function datamatrix(opts,dwg) { return _ToAny(bwipp_datamatrix,opts,dwg); };\nexport function datamatrixrectangular(opts,dwg) { return _ToAny(bwipp_datamatrixrectangular,opts,dwg); };\nexport function datamatrixrectangularextension(opts,dwg) { return _ToAny(bwipp_datamatrixrectangularextension,opts,dwg); };\nexport function dotcode(opts,dwg) { return _ToAny(bwipp_dotcode,opts,dwg); };\nexport function ean13(opts,dwg) { return _ToAny(bwipp_ean13,opts,dwg); };\nexport function ean13composite(opts,dwg) { return _ToAny(bwipp_ean13composite,opts,dwg); };\nexport function ean14(opts,dwg) { return _ToAny(bwipp_ean14,opts,dwg); };\nexport function ean2(opts,dwg) { return _ToAny(bwipp_ean2,opts,dwg); };\nexport function ean5(opts,dwg) { return _ToAny(bwipp_ean5,opts,dwg); };\nexport function ean8(opts,dwg) { return _ToAny(bwipp_ean8,opts,dwg); };\nexport function ean8composite(opts,dwg) { return _ToAny(bwipp_ean8composite,opts,dwg); };\nexport function flattermarken(opts,dwg) { return _ToAny(bwipp_flattermarken,opts,dwg); };\nexport function gs1_128(opts,dwg) { return _ToAny(bwipp_gs1_128,opts,dwg); };\nexport function gs1_128composite(opts,dwg) { return _ToAny(bwipp_gs1_128composite,opts,dwg); };\nexport function gs1_cc(opts,dwg) { return _ToAny(bwipp_gs1_cc,opts,dwg); };\nexport function gs1datamatrix(opts,dwg) { return _ToAny(bwipp_gs1datamatrix,opts,dwg); };\nexport function gs1datamatrixrectangular(opts,dwg) { return _ToAny(bwipp_gs1datamatrixrectangular,opts,dwg); };\nexport function gs1dldatamatrix(opts,dwg) { return _ToAny(bwipp_gs1dldatamatrix,opts,dwg); };\nexport function gs1dlqrcode(opts,dwg) { return _ToAny(bwipp_gs1dlqrcode,opts,dwg); };\nexport function gs1dotcode(opts,dwg) { return _ToAny(bwipp_gs1dotcode,opts,dwg); };\nexport function gs1northamericancoupon(opts,dwg) { return _ToAny(bwipp_gs1northamericancoupon,opts,dwg); };\nexport function gs1qrcode(opts,dwg) { return _ToAny(bwipp_gs1qrcode,opts,dwg); };\nexport function hanxin(opts,dwg) { return _ToAny(bwipp_hanxin,opts,dwg); };\nexport function hibcazteccode(opts,dwg) { return _ToAny(bwipp_hibcazteccode,opts,dwg); };\nexport function hibccodablockf(opts,dwg) { return _ToAny(bwipp_hibccodablockf,opts,dwg); };\nexport function hibccode128(opts,dwg) { return _ToAny(bwipp_hibccode128,opts,dwg); };\nexport function hibccode39(opts,dwg) { return _ToAny(bwipp_hibccode39,opts,dwg); };\nexport function hibcdatamatrix(opts,dwg) { return _ToAny(bwipp_hibcdatamatrix,opts,dwg); };\nexport function hibcdatamatrixrectangular(opts,dwg) { return _ToAny(bwipp_hibcdatamatrixrectangular,opts,dwg); };\nexport function hibcmicropdf417(opts,dwg) { return _ToAny(bwipp_hibcmicropdf417,opts,dwg); };\nexport function hibcpdf417(opts,dwg) { return _ToAny(bwipp_hibcpdf417,opts,dwg); };\nexport function hibcqrcode(opts,dwg) { return _ToAny(bwipp_hibcqrcode,opts,dwg); };\nexport function iata2of5(opts,dwg) { return _ToAny(bwipp_iata2of5,opts,dwg); };\nexport function identcode(opts,dwg) { return _ToAny(bwipp_identcode,opts,dwg); };\nexport function industrial2of5(opts,dwg) { return _ToAny(bwipp_industrial2of5,opts,dwg); };\nexport function interleaved2of5(opts,dwg) { return _ToAny(bwipp_interleaved2of5,opts,dwg); };\nexport function isbn(opts,dwg) { return _ToAny(bwipp_isbn,opts,dwg); };\nexport function ismn(opts,dwg) { return _ToAny(bwipp_ismn,opts,dwg); };\nexport function issn(opts,dwg) { return _ToAny(bwipp_issn,opts,dwg); };\nexport function itf14(opts,dwg) { return _ToAny(bwipp_itf14,opts,dwg); };\nexport function jabcode(opts,dwg) { return _ToAny(bwipp_jabcode,opts,dwg); };\nexport function japanpost(opts,dwg) { return _ToAny(bwipp_japanpost,opts,dwg); };\nexport function kix(opts,dwg) { return _ToAny(bwipp_kix,opts,dwg); };\nexport function leitcode(opts,dwg) { return _ToAny(bwipp_leitcode,opts,dwg); };\nexport function mailmark(opts,dwg) { return _ToAny(bwipp_mailmark,opts,dwg); };\nexport function mands(opts,dwg) { return _ToAny(bwipp_mands,opts,dwg); };\nexport function matrix2of5(opts,dwg) { return _ToAny(bwipp_matrix2of5,opts,dwg); };\nexport function maxicode(opts,dwg) { return _ToAny(bwipp_maxicode,opts,dwg); };\nexport function micropdf417(opts,dwg) { return _ToAny(bwipp_micropdf417,opts,dwg); };\nexport function microqrcode(opts,dwg) { return _ToAny(bwipp_microqrcode,opts,dwg); };\nexport function msi(opts,dwg) { return _ToAny(bwipp_msi,opts,dwg); };\nexport function onecode(opts,dwg) { return _ToAny(bwipp_onecode,opts,dwg); };\nexport function pdf417(opts,dwg) { return _ToAny(bwipp_pdf417,opts,dwg); };\nexport function pdf417compact(opts,dwg) { return _ToAny(bwipp_pdf417compact,opts,dwg); };\nexport function pharmacode(opts,dwg) { return _ToAny(bwipp_pharmacode,opts,dwg); };\nexport function pharmacode2(opts,dwg) { return _ToAny(bwipp_pharmacode2,opts,dwg); };\nexport function planet(opts,dwg) { return _ToAny(bwipp_planet,opts,dwg); };\nexport function plessey(opts,dwg) { return _ToAny(bwipp_plessey,opts,dwg); };\nexport function posicode(opts,dwg) { return _ToAny(bwipp_posicode,opts,dwg); };\nexport function postnet(opts,dwg) { return _ToAny(bwipp_postnet,opts,dwg); };\nexport function pzn(opts,dwg) { return _ToAny(bwipp_pzn,opts,dwg); };\nexport function qrcode(opts,dwg) { return _ToAny(bwipp_qrcode,opts,dwg); };\nexport function rationalizedCodabar(opts,dwg) { return _ToAny(bwipp_rationalizedCodabar,opts,dwg); };\nexport function raw(opts,dwg) { return _ToAny(bwipp_raw,opts,dwg); };\nexport function rectangularmicroqrcode(opts,dwg) { return _ToAny(bwipp_rectangularmicroqrcode,opts,dwg); };\nexport function royalmail(opts,dwg) { return _ToAny(bwipp_royalmail,opts,dwg); };\nexport function sscc18(opts,dwg) { return _ToAny(bwipp_sscc18,opts,dwg); };\nexport function swissqrcode(opts,dwg) { return _ToAny(bwipp_swissqrcode,opts,dwg); };\nexport function symbol(opts,dwg) { return _ToAny(bwipp_symbol,opts,dwg); };\nexport function telepen(opts,dwg) { return _ToAny(bwipp_telepen,opts,dwg); };\nexport function telepennumeric(opts,dwg) { return _ToAny(bwipp_telepennumeric,opts,dwg); };\nexport function ultracode(opts,dwg) { return _ToAny(bwipp_ultracode,opts,dwg); };\nexport function upca(opts,dwg) { return _ToAny(bwipp_upca,opts,dwg); };\nexport function upcacomposite(opts,dwg) { return _ToAny(bwipp_upcacomposite,opts,dwg); };\nexport function upce(opts,dwg) { return _ToAny(bwipp_upce,opts,dwg); };\nexport function upcecomposite(opts,dwg) { return _ToAny(bwipp_upcecomposite,opts,dwg); };\nexport { ToBuffer as toBuffer, ToSVG as toSVG, Render as render, LoadFont as loadFont,\n         DrawingZlibPng as drawingZlibPng, DrawingSVG as drawingSVG,\n         BWIPJS_VERSION, BWIPP_VERSION,\n};\nexport default {\n    request:Request, toBuffer:ToBuffer, toSVG:ToSVG, render:Render, raw:ToRaw,\n    drawingZlibPng:DrawingZlibPng, drawingSVG:DrawingSVG,\n    fixupOptions:FixupOptions, loadFont:LoadFont, FontLib, BWIPJS_VERSION, BWIPP_VERSION,\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}