{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAChB","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/utils/authUtils.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\nimport { jwtVerify } from 'jose';\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\r\n\r\nexport function generateToken(adminId: string) {\r\n    return jwt.sign({ adminId }, SECRET_KEY, { expiresIn: '1h' });\r\n}\r\n\r\nexport async function verifyToken(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, new TextEncoder().encode(SECRET_KEY));\r\n        console.log(`payload - `, payload);\r\n        return payload;\r\n    } catch (error) {\r\n        console.error('Token verification failed:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Check if admin exists in the database\r\nexport async function isAdminExist(adminId: string) {\r\n    try {\r\n        // Validate if adminId is a valid positive integer\r\n        if (!adminId || isNaN(Number(adminId)) || Number(adminId) <= 0) {\r\n            return { status: false, message: \"Invalid admin ID. It must be a positive integer.\" };\r\n        }\r\n\r\n        // Convert adminId to integer\r\n        const adminIdInt = parseInt(adminId, 10);\r\n\r\n        // Fetch admin details from database\r\n        const admin = await prisma.admin.findUnique({\r\n            where: { id: adminIdInt },\r\n            select: {\r\n                id: true,\r\n                name: true,\r\n                email: true,\r\n                password: true, // Hashed password stored in DB\r\n                role: true,\r\n            },\r\n        });\r\n\r\n        // If admin doesn't exist, return false with a message\r\n        if (!admin) {\r\n            return { status: false, message: \"Admin with the provided ID does not exist\" };\r\n        }\r\n\r\n        // Return admin details if found\r\n        return { status: true, admin };\r\n    } catch (error) {\r\n        console.error(\"Error fetching admin by ID:\", error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,SAAS,cAAc,OAAe;IACzC,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;IAAQ,GAAG,YAAY;QAAE,WAAW;IAAK;AAC/D;AAEO,eAAe,YAAY,KAAa;IAC3C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,IAAI,cAAc,MAAM,CAAC;QACpE,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE;QAC1B,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACX;AACJ;AAGO,eAAe,aAAa,OAAe;IAC9C,IAAI;QACA,kDAAkD;QAClD,IAAI,CAAC,WAAW,MAAM,OAAO,aAAa,OAAO,YAAY,GAAG;YAC5D,OAAO;gBAAE,QAAQ;gBAAO,SAAS;YAAmD;QACxF;QAEA,6BAA6B;QAC7B,MAAM,aAAa,SAAS,SAAS;QAErC,oCAAoC;QACpC,MAAM,QAAQ,MAAM,sHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI;YAAW;YACxB,QAAQ;gBACJ,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,MAAM;YACV;QACJ;QAEA,sDAAsD;QACtD,IAAI,CAAC,OAAO;YACR,OAAO;gBAAE,QAAQ;gBAAO,SAAS;YAA4C;QACjF;QAEA,gCAAgC;QAChC,OAAO;YAAE,QAAQ;YAAM;QAAM;IACjC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAwB;IAC7D;AACJ","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/sleeping-owl/src/app/api/admin/list/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\nimport { isAdminExist } from \"@/utils/authUtils\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Retrieve x-admin-id from request headers\r\n    const adminId = req.headers.get(\"x-admin-id\");\r\n    if (!adminId) {\r\n      return NextResponse.json(\r\n        { error: \"Admin ID is missing from request\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Log the adminId to console\r\n    console.log(\"x-admin-id:\", adminId);\r\n\r\n    // Check if admin exists\r\n    const result = await isAdminExist(adminId);\r\n    console.log(`result - `, result);\r\n    if (!result.status) {\r\n      return NextResponse.json({ error: result.message }, { status: 404 });\r\n    }\r\n\r\n    const admins = await prisma.admin.findMany({\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({ success: true, data: admins }, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json({ success: false, error: \"Failed to fetch admins\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,2CAA2C;QAC3C,MAAM,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;QAChC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,QAAQ,GAAG,CAAC,eAAe;QAE3B,wBAAwB;QACxB,MAAM,SAAS,MAAM,CAAA,GAAA,2HAAA,CAAA,eAAY,AAAD,EAAE;QAClC,QAAQ,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE;QACzB,IAAI,CAAC,OAAO,MAAM,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,OAAO,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,SAAS,MAAM,sHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,MAAM;gBACN,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAO,GAAG;YAAE,QAAQ;QAAI;IAC1E,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACF","debugId":null}}]
}