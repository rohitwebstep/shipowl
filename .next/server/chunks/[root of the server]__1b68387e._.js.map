{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        // Attempt to connect to the database\r\n        await prisma.$connect();\r\n        console.log(\"Database connection established successfully.\");\r\n    } catch (error) {\r\n        // If connection fails, log the error\r\n        console.error(\"Database connection failed:\", error);\r\n        // Avoid using process.exit in Edge Runtime\r\n        // Instead, you can throw an error to be handled by the calling code\r\n        throw new Error(\"Database connection failed\");\r\n    }\r\n}\r\n\r\nconnectToDatabase().catch((error) => {\r\n    // Handle any unhandled promise rejections here, if necessary\r\n    console.error(error);\r\n    // You can choose to return a response or perform other actions instead of exiting\r\n});\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,eAAe;IACX,IAAI;QACA,qCAAqC;QACrC,MAAM,OAAO,QAAQ;QACrB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,qCAAqC;QACrC,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,2CAA2C;QAC3C,oEAAoE;QACpE,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,oBAAoB,KAAK,CAAC,CAAC;IACvB,6DAA6D;IAC7D,QAAQ,KAAK,CAAC;AACd,kFAAkF;AACtF;uCAEe","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/utils/authUtils.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { jwtVerify } from 'jose';\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || '3792e68ef011e0f236a60627ddf304e1bb64d76d5e4dbebca4579490d3c4e6d8c618456f29aa6f92f8dc3cbd4414362b47d4545ffdc0b9549e43b629c39282bb36b9cff7295fc4269d765d59e4d8a811113b911080878f7647e0329a072afdc06d2ecd658c8e79f2ad04e74dbffc45ed10c850b02afdf10b209989910fadaf7ddbef0bb7d0cff27ed8f4a10d3415420107ddba2d9ac8bcf4f7b3b942b5bbe600d9007f9e88b2451cbfaeaab239677b3ed28eaa860eb40fd5d0e36969b6943a3215d2a9f1125ca06be806f8d73d8ae642c4a29b3a728cf42305e1150e4c1f3ed6e14bd3662531cd14357c6b3f3a57095609811f5e9459307cbe70f9b7a159c8d3';\r\n\r\nexport function generateToken(userId: number, userRole: string) {\r\n    return jwt.sign({ userId, userRole }, SECRET_KEY, { expiresIn: '1h' });\r\n}\r\n\r\nexport async function verifyToken(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, new TextEncoder().encode(SECRET_KEY));\r\n        console.log(`payload - `, payload);\r\n        return payload;\r\n    } catch (error) {\r\n        console.error('Token verification failed:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Check if user exists in the database\r\nexport async function isUserExist(userId: number, userRole: string) {\r\n    try {\r\n        const userRoleStr = String(userRole); // Ensure it's a string\r\n        const userModel = [\"admin\", \"dropshipper\", \"supplier\"].includes(userRoleStr) ? \"user\" : \"userStaff\";\r\n\r\n        // Fetch user details from database\r\n        let user\r\n        if (userModel === \"user\") {\r\n            user = await prisma.user.findUnique({\r\n                where: { id: userId },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        } else {\r\n            user = await prisma.userStaff.findUnique({\r\n                where: { id: userId },\r\n                select: {\r\n                    id: true,\r\n                    name: true,\r\n                    email: true,\r\n                    password: true, // Hashed password stored in DB\r\n                    role: true,\r\n                },\r\n            });\r\n        }\r\n\r\n        // If user doesn't exist, return false with a message\r\n        if (!user) {\r\n            return { status: false, message: \"User with the provided ID does not exist\" };\r\n        }\r\n\r\n        // Return user details if found\r\n        return { status: true, user };\r\n    } catch (error) {\r\n        console.error(\"Error fetching user by ID:\", error);\r\n        return { status: false, message: \"Internal Server Error\" };\r\n    }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,SAAS,cAAc,MAAc,EAAE,QAAgB;IAC1D,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;QAAQ;IAAS,GAAG,YAAY;QAAE,WAAW;IAAK;AACxE;AAEO,eAAe,YAAY,KAAa;IAC3C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,IAAI,cAAc,MAAM,CAAC;QACpE,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE;QAC1B,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACX;AACJ;AAGO,eAAe,YAAY,MAAc,EAAE,QAAgB;IAC9D,IAAI;QACA,MAAM,cAAc,OAAO,WAAW,uBAAuB;QAC7D,MAAM,YAAY;YAAC;YAAS;YAAe;SAAW,CAAC,QAAQ,CAAC,eAAe,SAAS;QAExF,mCAAmC;QACnC,IAAI;QACJ,IAAI,cAAc,QAAQ;YACtB,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChC,OAAO;oBAAE,IAAI;gBAAO;gBACpB,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ,OAAO;YACH,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,SAAS,CAAC,UAAU,CAAC;gBACrC,OAAO;oBAAE,IAAI;gBAAO;gBACpB,QAAQ;oBACJ,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ;QAEA,qDAAqD;QACrD,IAAI,CAAC,MAAM;YACP,OAAO;gBAAE,QAAQ;gBAAO,SAAS;YAA2C;QAChF;QAEA,+BAA+B;QAC/B,OAAO;YAAE,QAAQ;YAAM;QAAK;IAChC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,QAAQ;YAAO,SAAS;QAAwB;IAC7D;AACJ","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/app/api/user/list/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { isUserExist } from \"@/utils/authUtils\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Retrieve x-user-id from request headers\r\n    const userId = req.headers.get(\"x-user-id\");\r\n    const userRole = req.headers.get(\"x-user-role\");\r\n    if (!userId || isNaN(Number(userId))) {\r\n      return NextResponse.json(\r\n        { error: \"User ID is missing or invalid in request\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if user exists\r\n    const result = await isUserExist(Number(userId), String(userRole));\r\n    if (!result.status) {\r\n      return NextResponse.json({ error: `User Not Found 1: ${result.message}` }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ success: true, data: result.user }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(`error - `, error);\r\n    return NextResponse.json({ success: false, error: \"Failed to fetch users\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,0CAA0C;QAC1C,MAAM,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC;QAC/B,MAAM,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC;QACjC,IAAI,CAAC,UAAU,MAAM,OAAO,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2C,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,SAAS,MAAM,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAS,OAAO;QACxD,IAAI,CAAC,OAAO,MAAM,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,kBAAkB,EAAE,OAAO,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM,OAAO,IAAI;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC/E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7F;AACF","debugId":null}}]
}