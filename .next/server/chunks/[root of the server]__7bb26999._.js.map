{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep2/shipping-owl/src/app/api/images/%5B...path%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\nexport async function GET(\r\n    req: NextRequest,\r\n    { params }: { params: Promise<{ path: string[] }> } // ðŸ‘ˆ params is now a Promise\r\n) {\r\n    // Await the params before using them\r\n    const resolvedParams = await params;\r\n    console.log('params:', resolvedParams);\r\n\r\n    const filePath = path.join(...resolvedParams.path);\r\n    console.log('filePath:', filePath);\r\n\r\n    try {\r\n        const fileBuffer = await fs.readFile(filePath);\r\n        const ext = path.extname(filePath).substring(1);\r\n\r\n        return new NextResponse(fileBuffer, {\r\n            status: 200,\r\n            headers: {\r\n                'Content-Type': `image/${ext}`,\r\n            },\r\n        });\r\n    } catch (err) {\r\n        console.error('File read error:', err);\r\n        return NextResponse.json({ error: 'File not found' }, { status: 404 });\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAClB,GAAgB,EAChB,EAAE,MAAM,EAA2C,CAAC,6BAA6B;AAA9B;IAEnD,qCAAqC;IACrC,MAAM,iBAAiB,MAAM;IAC7B,QAAQ,GAAG,CAAC,WAAW;IAEvB,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,IAAI,eAAe,IAAI;IACjD,QAAQ,GAAG,CAAC,aAAa;IAEzB,IAAI;QACA,MAAM,aAAa,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC;QACrC,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,UAAU,SAAS,CAAC;QAE7C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,YAAY;YAChC,QAAQ;YACR,SAAS;gBACL,gBAAgB,CAAC,MAAM,EAAE,KAAK;YAClC;QACJ;IACJ,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;AACJ","debugId":null}}]
}