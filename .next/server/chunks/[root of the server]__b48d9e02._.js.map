{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        // Attempt to connect to the database\r\n        await prisma.$connect();\r\n        console.log(\"Database connection established successfully.\");\r\n    } catch (error) {\r\n        // If connection fails, log the error\r\n        console.error(\"Database connection failed:\", error);\r\n        // Avoid using process.exit in Edge Runtime\r\n        // Instead, you can throw an error to be handled by the calling code\r\n        throw new Error(\"Database connection failed\");\r\n    }\r\n}\r\n\r\nconnectToDatabase().catch((error) => {\r\n    // Handle any unhandled promise rejections here, if necessary\r\n    console.error(error);\r\n    // You can choose to return a response or perform other actions instead of exiting\r\n});\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,eAAe;IACX,IAAI;QACA,qCAAqC;QACrC,MAAM,OAAO,QAAQ;QACrB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,qCAAqC;QACrC,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,2CAA2C;QAC3C,oEAAoE;QACpE,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,oBAAoB,KAAK,CAAC,CAAC;IACvB,6DAA6D;IAC7D,QAAQ,KAAK,CAAC;AACd,kFAAkF;AACtF;uCAEe","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Webstep/Shipping%20OWL/2025/April/04/WOKRING/sleeping-owl/src/app/api/admin/list/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Retrieve x-admin-id from request headers\r\n    const adminId = req.headers.get(\"x-admin-id\");\r\n    if (!adminId) {\r\n      return NextResponse.json(\r\n        { error: \"Admin ID is missing from request\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const admins = await prisma.admin.findMany({\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({ success: true, data: admins }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(`error - `, error);\r\n    return NextResponse.json({ success: false, error: \"Failed to fetch admins\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,2CAA2C;QAC3C,MAAM,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;QAChC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,sHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,MAAM;gBACN,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAO,GAAG;YAAE,QAAQ;QAAI;IAC1E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACF","debugId":null}}]
}