// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model emailConfig {
  id             BigInt   @id @default(autoincrement())

  panel          String
  module         String
  subject        String
  action         String
  html_template  String?   @db.LongText

  smtp_host      String
  smtp_secure    Boolean
  smtp_port      Int
  smtp_username  String
  smtp_password  String

  from_email     String
  from_name      String

  status         Boolean

  createdAt      DateTime @default(now())
  createdBy      Int?
  createdByRole  String?
  updatedAt      DateTime @updatedAt
  updatedBy      Int?
  updatedByRole  String?

  @@index([createdBy])
  @@index([updatedBy])
}

model admin {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String
  role            String      @default("admin")
  status          String      @default("active")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  pr_token        String?
  pr_expires_at   DateTime?
  pr_last_reset   DateTime?

  staff           adminStaff[]
}

model adminStaff {
  id              Int       @id @default(autoincrement())
  admin_id        Int       @unique
  name            String    
  email           String    @unique
  password        String
  role            String    @default("admin")
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  pr_token        String?
  pr_expires_at   DateTime?
  pr_last_reset   DateTime?

  admin           admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade)
}

model loginLog {
  id                      Int       @id @default(autoincrement())
  adminId                 Int
  adminRole               String
  action                  String
  response                String?

  ipv4                    String?
  ipv6                    String?
  internetServiceProvider String?
  clientInformation       String?
  userAgent               String?

  createdAt               DateTime  @default(now())
  createdBy               Int?
  createdByRole           String?
  updatedAt               DateTime  @updatedAt
  updatedBy               Int?
  updatedByRole           String?
  deletedAt               DateTime?
  deletedBy               Int?
  deletedByRole           String?

  @@index([adminId])
  @@index([adminRole])
  @@index([action])
  @@index([createdAt])
  @@index([deletedAt])
}

model activityLog {
  id                      Int       @id @default(autoincrement())
  adminId                 Int
  adminRole               String
  module                  String
  action                  String
  endpoint                String
  method                  String
  payload                 String?     @db.LongText
  response                String?     @db.LongText
  result                  Boolean
  data                    String?     @db.LongText

  ipv4                    String?
  ipv6                    String?
  internetServiceProvider String?
  clientInformation       String?
  userAgent               String?

  createdAt               DateTime   @default(now())
  createdBy               Int?
  createdByRole           String?
  updatedAt               DateTime   @updatedAt
  updatedBy               Int?
  updatedByRole           String?
  deletedAt               DateTime?
  deletedBy               Int?
  deletedByRole           String?

  @@index([adminId])
  @@index([adminRole])
  @@index([module])
  @@index([action])
  @@index([createdAt])
  @@index([deletedAt])
}

model country {
  id                    BigInt          @id @default(autoincrement())
  name                  String
  iso3                  String?
  iso2                  String?
  phonecode             String?
  currency              String?
  currencyName          String?
  currencySymbol        String?
  nationality           String?
  createdAt             DateTime        @default(now())
  createdBy             Int?
  createdByRole         String?
  updatedAt             DateTime        @updatedAt
  updatedBy             Int?
  updatedByRole         String?
  deletedAt             DateTime?
  deletedBy             Int?
  deletedByRole         String?

  states                state[]
  cities                city[]
  warehouses            warehouse[]

  // Add the relation fields for `originCountry` and `shippingCountry`
  originProducts        product[]       @relation("OriginCountryRelation")
  shippingProducts      product[]       @relation("ShippingCountryRelation")

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model state {
  id              BigInt     @id @default(autoincrement())
  name            String
  countryId       BigInt
  iso2            String?
  type            String?
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?

  country         country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities          city[]
  warehouses      warehouse[]

  @@index([countryId])
}

model city {
  id              BigInt     @id @default(autoincrement())
  name            String
  stateId         BigInt
  countryId       BigInt
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?

  state           state      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  country         country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  warehouses      warehouse[]

  @@index([stateId])
  @@index([countryId])
}

model warehouse {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String    @unique
  gst_number      String
  contact_name    String
  contact_number  String
  address_line_1  String
  address_line_2  String?
  postal_code     String

  countryId       BigInt?
  stateId         BigInt?
  cityId          BigInt?

  country         country?    @relation(fields: [countryId], references: [id], onDelete: SetNull)
  state           state?      @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city            city?       @relation(fields: [cityId], references: [id], onDelete: SetNull)

  status          Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?

  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model category {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  description    String?   @db.LongText
  image          String?   @db.LongText
  status         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  createdBy      Int?
  createdByRole  String?
  updatedAt      DateTime  @updatedAt
  updatedBy      Int?
  updatedByRole  String?
  deletedAt      DateTime?
  deletedBy      Int?
  deletedByRole  String?

  products      product[]

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model brand {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  description    String?   @db.LongText
  image          String?   @db.LongText
  status         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  createdBy      Int?
  createdByRole  String?
  updatedAt      DateTime  @updatedAt
  updatedBy      Int?
  updatedByRole  String?
  deletedAt      DateTime?
  deletedBy      Int?
  deletedByRole  String?

  products      product[]
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model product {
  id                              Int              @id @default(autoincrement())
  categoryId                      Int
  name                            String
  slug                            String           @unique
  main_sku                        String           @unique
  description                     String?          @db.LongText
  tags                            Json?            // store as array of strings
  brandId                         Int
  originCountryId                 BigInt
  ean                             String?
  hsnCode                         String?
  taxRate                         Float?
  rtoAddress                      String?
  pickupAddress                   String?

  shippingCountryId               BigInt
  video_url                       String?
  list_as                         String?          // e.g., featured, trending, etc.

  shipping_time                   String?
  weight                          Float?

  package_length                  Float?           // Updated from package_len
  package_width                   Float?           // Updated from pack_width
  package_height                  Float?           // Updated from package_heig
  chargeable_weight               Float?           // Updated from chargab_weig
  package_weight_image            String?          // Updated from package_wei_image
  package_length_image            String?          // Updated from package_leng_image
  package_width_image             String?          // Updated from package_wid_image
  package_height_image            String?          // Updated from package_heig_image
  product_detail_video            String?

  status                          Boolean          @default(true)
  createdAt                       DateTime         @default(now())
  createdBy                       Int?
  createdByRole                   String?
  updatedAt                       DateTime         @updatedAt
  updatedBy                       Int?
  updatedByRole                   String?
  deletedAt                       DateTime?
  deletedBy                       Int?
  deletedByRole                   String?

  category                        category         @relation(fields: [categoryId], references: [id])
  brand                           brand            @relation(fields: [brandId], references: [id])
  originCountry                   country          @relation("OriginCountryRelation", fields: [originCountryId], references: [id])
  shippingCountry                 country          @relation("ShippingCountryRelation", fields: [shippingCountryId], references: [id])

  variants                        productVariant[]

  @@index([categoryId])
  @@index([brandId])
  @@index([originCountryId])
  @@index([shippingCountryId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model productVariant {
  id              Int              @id @default(autoincrement())
  productId       Int
  image           String
  color           String
  sku             String           @unique
  qty             Int
  currency        String
  article_id      String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  product         product          @relation(fields: [productId], references: [id])

  @@index([productId])
}