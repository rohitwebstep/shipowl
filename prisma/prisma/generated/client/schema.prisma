// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model emailConfig {
  id BigInt @id @default(autoincrement())

  panel         String
  module        String
  subject       String
  action        String
  html_template String? @db.LongText

  smtp_host     String
  smtp_secure   Boolean
  smtp_port     Int
  smtp_username String
  smtp_password String

  from_email String
  from_name  String

  status Boolean

  createdAt     DateTime @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime @updatedAt
  updatedBy     Int?
  updatedByRole String?

  @@index([createdBy])
  @@index([updatedBy])
}

model admin {
  id                  Int       @id @default(autoincrement())
  profilePicture      String?   @db.LongText
  name                String
  username            String?   @unique
  website             String?
  email               String
  referralCode        String?
  password            String
  role                String    @default("admin")
  type                String    @default("main")
  status              String    @default("active")
  dateOfBirth         DateTime?
  phoneNumber         String?
  currentAddress      String?
  permanentAddress    String?
  permanentPostalCode String?
  permanentCityId     BigInt?
  permanentStateId    BigInt?
  permanentCountryId  BigInt?
  pr_token            String?
  pr_expires_at       DateTime?
  pr_last_reset       DateTime?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  permanentCity    city?    @relation(fields: [permanentCityId], references: [id], onDelete: SetNull)
  permanentState   state?   @relation(fields: [permanentStateId], references: [id], onDelete: SetNull)
  permanentCountry country? @relation(fields: [permanentCountryId], references: [id], onDelete: SetNull)

  staff                      adminStaff[]
  companyDetail              companyDetail?              @relation
  bankAccount                bankAccount?                @relation
  supplierProducts           supplierProduct[]           @relation("SupplierProducts")
  dropshipperProducts        dropshipperProduct[]        @relation("DropshipperProducts")
  suppliedProducts           dropshipperProduct[]        @relation("SuppliedProducts")
  bankAccountChangeRequest   bankAccountChangeRequest?   @relation
  productVisibility          productSupplierVisibility[]
  supplierProductVariants    supplierProductVariant[]    @relation
  dropshipperProductVariants dropshipperProductVariant[] @relation
}

model companyDetail {
  id             Int     @id @default(autoincrement())
  adminId        Int     @unique
  companyName    String?
  brandName      String?
  brandShortName String?
  billingAddress String?
  billingPincode String?

  billingCountryId BigInt?
  billingCountry   country? @relation("CompanyCountryRelation", fields: [billingCountryId], references: [id], onDelete: SetNull)

  billingStateId BigInt?
  billingState   state?  @relation("CompanyStateRelation", fields: [billingStateId], references: [id], onDelete: SetNull)

  billingCityId BigInt?
  billingCity   city?   @relation("CompanyCityRelation", fields: [billingCityId], references: [id], onDelete: SetNull)

  businessType             String?
  clientEntryType          String?
  gstNumber                String?
  companyPanNumber         String?
  aadharNumber             String?
  gstDocument              String? // File path or URL
  panCardHolderName        String?
  aadharCardHolderName     String?
  panCardImage             String? @db.LongText
  aadharCardImage          String? @db.LongText
  additionalDocumentUpload String? // Optional file or zip path
  documentId               String?
  documentName             String?
  documentImage            String? @db.LongText

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  admin admin @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model bankAccount {
  id                   Int     @id @default(autoincrement())
  adminId              Int     @unique
  accountHolderName    String
  accountNumber        String
  bankName             String
  bankBranch           String
  accountType          String
  ifscCode             String
  cancelledChequeImage String? @db.LongText
  paymentMethod        String?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  admin admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  bankAccountChangeRequest bankAccountChangeRequest? @relation
}

model bankAccountChangeRequest {
  id                   Int     @id @default(autoincrement())
  adminId              Int     @unique
  bankAccountId        Int?    @unique
  accountHolderName    String
  accountNumber        String
  bankName             String
  bankBranch           String
  accountType          String
  ifscCode             String
  cancelledChequeImage String? @db.LongText
  paymentMethod        String?
  status               String  @default("pending") // e.g., 'pending', 'approved', 'rejected'
  remarks              String? @db.LongText // Optional admin remarks for approval/rejection

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  supplier    admin        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  bankAccount bankAccount? @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)

  @@index([adminId])
  @@index([bankAccountId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model adminStaff {
  id                  Int       @id @default(autoincrement())
  admin_id            Int
  profilePicture      String?   @db.LongText
  name                String
  email               String    @unique
  phoneNumber         String?
  currentAddress      String?
  permanentAddress    String?
  permanentPostalCode String?
  permanentCityId     BigInt?
  permanentStateId    BigInt?
  permanentCountryId  BigInt?
  password            String
  role                String    @default("admin")
  status              String    @default("active")
  pr_token            String?
  pr_expires_at       DateTime?
  pr_last_reset       DateTime?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  permanentCity    city?    @relation(fields: [permanentCityId], references: [id], onDelete: SetNull)
  permanentState   state?   @relation(fields: [permanentStateId], references: [id], onDelete: SetNull)
  permanentCountry country? @relation(fields: [permanentCountryId], references: [id], onDelete: SetNull)

  admin       admin                     @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  permissions adminStaffHasPermission[]
}

model permission {
  id     Int     @id @default(autoincrement())
  panel  String
  module String
  action String
  status Boolean @default(true)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  adminStaffPermissions adminStaffHasPermission[]
}

model adminStaffHasPermission {
  id           Int @id @default(autoincrement())
  adminStaffId Int
  permissionId Int

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  adminStaff adminStaff @relation(fields: [adminStaffId], references: [id], onDelete: Cascade)
  permission permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model loginLog {
  id        Int     @id @default(autoincrement())
  adminId   Int
  adminRole String
  action    String
  response  String?

  ipv4                    String?
  ipv6                    String?
  internetServiceProvider String?
  clientInformation       String?
  userAgent               String?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  @@index([adminId])
  @@index([adminRole])
  @@index([action])
  @@index([createdAt])
  @@index([deletedAt])
}

model activityLog {
  id        Int     @id @default(autoincrement())
  adminId   Int
  adminRole String
  module    String
  action    String
  endpoint  String
  method    String
  payload   String? @db.LongText
  response  String? @db.LongText
  result    Boolean
  data      String? @db.LongText

  ipv4                    String?
  ipv6                    String?
  internetServiceProvider String?
  clientInformation       String?
  userAgent               String?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  @@index([adminId])
  @@index([adminRole])
  @@index([module])
  @@index([action])
  @@index([createdAt])
  @@index([deletedAt])
}

model country {
  id             BigInt    @id @default(autoincrement())
  name           String
  iso3           String?
  iso2           String?
  phonecode      String?
  currency       String?
  currencyName   String?
  currencySymbol String?
  nationality    String?
  createdAt      DateTime  @default(now())
  createdBy      Int?
  createdByRole  String?
  updatedAt      DateTime  @updatedAt
  updatedBy      Int?
  updatedByRole  String?
  deletedAt      DateTime?
  deletedBy      Int?
  deletedByRole  String?

  states      state[]
  cities      city[]
  warehouses  warehouse[]
  highRtos    highRto[]
  admins      admin[]
  adminStaffs adminStaff[]

  // Add the relation fields for originCountry and shippingCountry
  originProducts   product[] @relation("OriginCountryRelation")
  shippingProducts product[] @relation("ShippingCountryRelation")

  shippingOrders order[] @relation("CountryShippingRelation")
  billingOrders  order[] @relation("CountryBillingRelation")

  billingCompanyDetails companyDetail[] @relation("CompanyCountryRelation")

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model state {
  id            BigInt    @id @default(autoincrement())
  name          String
  countryId     BigInt
  iso2          String?
  type          String?
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  country     country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities      city[]
  warehouses  warehouse[]
  highRtos    highRto[]
  admins      admin[]
  adminStaffs adminStaff[]

  shippingOrders order[] @relation("StateShippingRelation")
  billingOrders  order[] @relation("StateBillingRelation")

  billingCompanyDetails companyDetail[] @relation("CompanyStateRelation")

  @@index([countryId])
}

model city {
  id            BigInt    @id @default(autoincrement())
  name          String
  stateId       BigInt
  countryId     BigInt
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  state       state        @relation(fields: [stateId], references: [id], onDelete: Cascade)
  country     country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  warehouses  warehouse[]
  highRtos    highRto[]
  admins      admin[]
  adminStaffs adminStaff[]

  shippingOrders order[] @relation("CityShippingRelation")
  billingOrders  order[] @relation("CityBillingRelation")

  billingCompanyDetails companyDetail[] @relation("CompanyCityRelation")

  @@index([stateId])
  @@index([countryId])
}

model warehouse {
  id             Int     @id @default(autoincrement())
  name           String
  slug           String  @unique
  gst_number     String
  contact_name   String
  contact_number String
  address_line_1 String
  address_line_2 String?
  postal_code    String

  countryId BigInt?
  stateId   BigInt?
  cityId    BigInt?

  country country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  state   state?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city    city?    @relation(fields: [cityId], references: [id], onDelete: SetNull)

  status Boolean @default(false)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model category {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique
  description   String?   @db.LongText
  image         String?   @db.LongText
  status        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  products        product[]
  productRequests productRequest[]

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model brand {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique
  description   String?   @db.LongText
  image         String?   @db.LongText
  status        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  products product[]

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model productRequest {
  id                  Int     @id @default(autoincrement())
  name                String
  categoryId          Int
  expectedPrice       Int?
  expectedDailyOrders String?
  url                 String? @db.LongText
  image               String? @db.LongText

  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  category category @relation(fields: [categoryId], references: [id])
}

model product {
  id                   Int     @id @default(autoincrement())
  shippingOwlProductId String  @unique
  categoryId           Int
  name                 String
  slug                 String  @unique
  main_sku             String  @unique
  description          String? @db.LongText
  tags                 Json? // store as array of strings
  brandId              Int
  originCountryId      BigInt
  hsnCode              String?
  taxRate              Float?
  rtoAddress           String?
  pickupAddress        String?

  shippingCountryId BigInt
  video_url         String? @db.LongText
  list_as           String? // e.g., featured, trending, etc.

  shipping_time String?
  weight        Float?

  package_length          Float? // Updated from package_len
  package_width           Float? // Updated from pack_width
  package_height          Float? // Updated from package_heig
  chargeable_weight       Float? // Updated from chargab_weig
  package_weight_image    String? @db.LongText
  package_length_image    String? @db.LongText
  package_width_image     String? @db.LongText
  package_height_image    String? @db.LongText
  product_detail_video    String? @db.LongText
  training_guidance_video String? @db.LongText

  isVisibleToAll Boolean @default(true)

  status          Boolean   @default(true)
  isVarientExists Boolean   @default(true)
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?

  category        category @relation(fields: [categoryId], references: [id])
  brand           brand    @relation(fields: [brandId], references: [id])
  originCountry   country  @relation("OriginCountryRelation", fields: [originCountryId], references: [id])
  shippingCountry country  @relation("ShippingCountryRelation", fields: [shippingCountryId], references: [id])

  variants                   productVariant[]
  orderItems                 orderItem[]
  supplierProducts           supplierProduct[]
  dropshipperProducts        dropshipperProduct[]
  supplierVisibility         productSupplierVisibility[]
  supplierProductVariants    supplierProductVariant[]    @relation
  dropshipperProductVariants dropshipperProductVariant[] @relation

  @@index([categoryId])
  @@index([brandId])
  @@index([originCountryId])
  @@index([shippingCountryId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model productVariant {
  id              Int     @id @default(autoincrement())
  productId       Int
  image           String  @db.LongText
  color           String
  modal           String
  sku             String  @unique
  product_link    String?
  suggested_price Float?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems              orderItem[]
  supplierProductVariants supplierProductVariant[] @relation

  @@index([productId])
}

model productSupplierVisibility {
  id            Int       @id @default(autoincrement())
  productId     Int
  supplierId    Int
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  product  product @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier admin   @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([supplierId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model courierCompany {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String  @unique
  code        String? @unique
  website     String? @db.LongText
  email       String
  phoneNumber String?
  status      Boolean @default(true)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?
}

model highRto {
  id      Int    @id @default(autoincrement())
  pincode String

  countryId BigInt?
  stateId   BigInt?
  cityId    BigInt?

  country country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  state   state?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city    city?    @relation(fields: [cityId], references: [id], onDelete: SetNull)

  status Boolean @default(false)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model badPincode {
  id      Int    @id @default(autoincrement())
  pincode String

  status Boolean @default(false)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model goodPincode {
  id      Int    @id @default(autoincrement())
  pincode String

  status Boolean @default(false)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model payment {
  id            Int       @id @default(autoincrement())
  transactionId String    @unique
  cycle         String?
  amount        Float?
  status        String?
  date          DateTime?

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  orders order[] @relation("OrderPayment")

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model order {
  id          Int     @id @default(autoincrement())
  orderNumber String  @unique
  status      String // e.g., 'pending', 'processing', 'completed', 'cancelled'
  orderNote   String? // Optional customer note

  // Financial Summary
  subtotal    Float  @default(0.0)
  tax         Float  @default(0.0)
  discount    Float  @default(0.0)
  totalAmount Float  @default(0.0)
  currency    String @default("USD")

  // Shipping Address
  shippingName      String
  shippingPhone     String
  shippingEmail     String
  shippingAddress   String
  shippingZip       String
  shippingCountryId BigInt?
  shippingStateId   BigInt?
  shippingCityId    BigInt?

  shippingCountry country? @relation("CountryShippingRelation", fields: [shippingCountryId], references: [id], onDelete: SetNull)
  shippingState   state?   @relation("StateShippingRelation", fields: [shippingStateId], references: [id], onDelete: SetNull)
  shippingCity    city?    @relation("CityShippingRelation", fields: [shippingCityId], references: [id], onDelete: SetNull)

  // Billing Address
  billingName      String
  billingPhone     String
  billingEmail     String
  billingAddress   String
  billingZip       String
  billingCountryId BigInt?
  billingStateId   BigInt?
  billingCityId    BigInt?

  billingCountry country? @relation("CountryBillingRelation", fields: [billingCountryId], references: [id], onDelete: SetNull)
  billingState   state?   @relation("StateBillingRelation", fields: [billingStateId], references: [id], onDelete: SetNull)
  billingCity    city?    @relation("CityBillingRelation", fields: [billingCityId], references: [id], onDelete: SetNull)

  // Optional: payment Reference
  paymentId Int?
  payment   payment? @relation("OrderPayment", fields: [paymentId], references: [id], onDelete: SetNull)

  shippingApiResult Json?

  // Meta / Audit Info
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  // order Items Relation
  items orderItem[] // One-to-many with orderItem model

  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model orderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int?
  variantId Int?
  quantity  Int
  price     Float
  total     Float

  order   order           @relation(fields: [orderId], references: [id])
  product product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant productVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model supplierProduct {
  id         Int     @id @default(autoincrement())
  supplierId Int
  productId  Int
  status     Boolean @default(true)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  supplier                   admin                       @relation("SupplierProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  product                    product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants                   supplierProductVariant[] // Relation to the new variant model
  dropshipperProducts        dropshipperProduct[]        @relation("SupplierProductRelation")
  dropshipperProductVariants dropshipperProductVariant[] @relation

  @@index([supplierId])
  @@index([productId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model supplierProductVariant {
  id                Int     @id @default(autoincrement())
  supplierId        Int
  productId         Int
  productVariantId  Int
  supplierProductId Int
  price             Float
  stock             Int
  status            Boolean @default(true)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  supplier            admin                       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  product             product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant             productVariant?             @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  supplierProduct     supplierProduct             @relation(fields: [supplierProductId], references: [id], onDelete: Cascade)
  dropshipperVariants dropshipperProductVariant[] @relation("SupplierToDropshipperVariant")

  @@index([supplierId])
  @@index([productId])
  @@index([supplierProductId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model dropshipperProduct {
  id                Int     @id @default(autoincrement())
  dropshipperId     Int
  supplierId        Int
  supplierProductId Int
  productId         Int
  status            Boolean @default(true)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  dropshipper     admin                       @relation("DropshipperProducts", fields: [dropshipperId], references: [id], onDelete: Cascade)
  supplier        admin                       @relation("SuppliedProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  product         product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierProduct supplierProduct             @relation("SupplierProductRelation", fields: [supplierProductId], references: [id], onDelete: Cascade)
  variants        dropshipperProductVariant[]

  @@index([dropshipperId])
  @@index([supplierId])
  @@index([productId])
  @@index([supplierProductId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model dropshipperProductVariant {
  id                       Int     @id @default(autoincrement())
  dropshipperId            Int
  productId                Int
  supplierProductId        Int
  dropshipperProductId     Int
  supplierProductVariantId Int
  price                    Float
  stock                    Int
  status                   Boolean @default(true)

  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?

  dropshipper            admin                  @relation(fields: [dropshipperId], references: [id], onDelete: Cascade)
  product                product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierProduct        supplierProduct        @relation(fields: [supplierProductId], references: [id], onDelete: Cascade)
  dropshipperProduct     dropshipperProduct     @relation(fields: [dropshipperProductId], references: [id], onDelete: Cascade)
  supplierProductVariant supplierProductVariant @relation("SupplierToDropshipperVariant", fields: [supplierProductVariantId], references: [id], onDelete: Cascade)

  @@index([dropshipperId])
  @@index([productId])
  @@index([supplierProductId])
  @@index([dropshipperProductId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}
